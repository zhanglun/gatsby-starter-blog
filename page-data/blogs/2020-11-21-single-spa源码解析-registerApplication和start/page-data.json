{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/blogs/2020-11-21-single-spa源码解析-registerApplication和start/",
    "result": {"data":{"site":{"siteMetadata":{"title":"张小伦的网络日志","description":"欢迎来到张小伦的网络日志 \n\t\t一个记录生活，分享心得的博客","menu":[{"id":"home","name":"首页","url":"/"},{"id":"category","name":"分类","url":"/categories"},{"id":"archive","name":"归档","url":"/archives"},{"id":"about","name":"关于我","url":"/about"}]}},"markdownRemark":{"id":"f6215d5d-64b3-53f8-a5d1-80290b31125a","html":"<p>首先将问题简化，假定主应用和子应用都已经准备好的情况下，针对应用的注册和启动这两个关键操作进行分析。</p>\n<p>在主应用中只需要调用<code class=\"language-text\">registerApplication</code>即可注册子应用，调用<code class=\"language-text\">start</code>启动主应用。比如下面的例子</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// single-spa-config.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> registerApplication<span class=\"token punctuation\">,</span> start <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'single-spa'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 使用简单参数</span>\n<span class=\"token function\">registerApplication</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'app2'</span><span class=\"token punctuation\">,</span> \n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src/app2/main.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">location</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> location<span class=\"token punctuation\">.</span>pathname<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/app2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> some<span class=\"token operator\">:</span> <span class=\"token string\">'value'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 使用对象参数</span>\n<span class=\"token function\">registerApplication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'app1'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">app</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src/app1/main.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  activeWhen<span class=\"token operator\">:</span> <span class=\"token string\">'/app1'</span><span class=\"token punctuation\">,</span>\n  customProps<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    some<span class=\"token operator\">:</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>registerApplication</h2>\n<p>先让我们来看一下函数签名</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">registerApplication</span><span class=\"token punctuation\">(</span>\n  appNameOrConfig<span class=\"token punctuation\">,</span>\n  appOrLoadApp<span class=\"token punctuation\">,</span>\n  activeWhen<span class=\"token punctuation\">,</span>\n  customProps\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>可以传四个参数，也能传递一个对象。对象参数的效果与四个参数效果一样。因为在 <code class=\"language-text\">registerApplication</code> 函数的顶部就会执行来一个序列化参数的操作，统一将参数转换成约定 <code class=\"language-text\">registration</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// src/application/apps.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">registerApplication</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">appNameOrConfig<span class=\"token punctuation\">,</span>\n  appOrLoadApp<span class=\"token punctuation\">,</span>\n  activeWhen<span class=\"token punctuation\">,</span>\n  customProps</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> registration <span class=\"token operator\">=</span> <span class=\"token function\">sanitizeArguments</span><span class=\"token punctuation\">(</span>\n    appNameOrConfig<span class=\"token punctuation\">,</span>\n    appOrLoadApp<span class=\"token punctuation\">,</span>\n    activeWhen<span class=\"token punctuation\">,</span>\n    customProps\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>序列化参数</h3>\n<p><code class=\"language-text\">sanitizeArguments</code>这个方法里面的逻辑不复杂，简单来说就是将各参数序列化成需要的类型。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">sanitizeArguments</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">appNameOrConfig<span class=\"token punctuation\">,</span>\n  appOrLoadApp<span class=\"token punctuation\">,</span>\n  activeWhen<span class=\"token punctuation\">,</span>\n  customProps</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> usingObjectAPI <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> appNameOrConfig <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> registration <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    loadApp<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    activeWhen<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    customProps<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>usingObjectAPI<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">validateRegisterWithConfig</span><span class=\"token punctuation\">(</span>appNameOrConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    registration<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> appNameOrConfig<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n    registration<span class=\"token punctuation\">.</span>loadApp <span class=\"token operator\">=</span> appNameOrConfig<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">;</span>\n    registration<span class=\"token punctuation\">.</span>activeWhen <span class=\"token operator\">=</span> appNameOrConfig<span class=\"token punctuation\">.</span>activeWhen<span class=\"token punctuation\">;</span>\n    registration<span class=\"token punctuation\">.</span>customProps <span class=\"token operator\">=</span> appNameOrConfig<span class=\"token punctuation\">.</span>customProps<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token comment\">// 校验各参数类型，如果不通过就抛出错误。</span>\n    <span class=\"token function\">validateRegisterWithArguments</span><span class=\"token punctuation\">(</span>\n      appNameOrConfig<span class=\"token punctuation\">,</span>\n      appOrLoadApp<span class=\"token punctuation\">,</span>\n      activeWhen<span class=\"token punctuation\">,</span>\n      customProps\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    registration<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> appNameOrConfig<span class=\"token punctuation\">;</span>\n    registration<span class=\"token punctuation\">.</span>loadApp <span class=\"token operator\">=</span> appOrLoadApp<span class=\"token punctuation\">;</span>\n    registration<span class=\"token punctuation\">.</span>activeWhen <span class=\"token operator\">=</span> activeWhen<span class=\"token punctuation\">;</span>\n    registration<span class=\"token punctuation\">.</span>customProps <span class=\"token operator\">=</span> customProps<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  registration<span class=\"token punctuation\">.</span>loadApp <span class=\"token operator\">=</span> <span class=\"token function\">sanitizeLoadApp</span><span class=\"token punctuation\">(</span>registration<span class=\"token punctuation\">.</span>loadApp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  registration<span class=\"token punctuation\">.</span>customProps <span class=\"token operator\">=</span> <span class=\"token function\">sanitizeCustomProps</span><span class=\"token punctuation\">(</span>registration<span class=\"token punctuation\">.</span>customProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  registration<span class=\"token punctuation\">.</span>activeWhen <span class=\"token operator\">=</span> <span class=\"token function\">sanitizeActiveWhen</span><span class=\"token punctuation\">(</span>registration<span class=\"token punctuation\">.</span>activeWhen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> registration<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>将应用注入</h3>\n<p>参数序列化之后，先调用 <code class=\"language-text\">getAppNames</code> 方法检查是否存在重复注册的子应用，如果有则抛出错误</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getAppNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>registration<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">formatErrorMessage</span><span class=\"token punctuation\">(</span>\n      <span class=\"token number\">21</span><span class=\"token punctuation\">,</span>\n      __DEV__ <span class=\"token operator\">&amp;&amp;</span>\n      <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">There is already an app registered with name </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>registration<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      registration<span class=\"token punctuation\">.</span>name\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>如果不存在重复注册的应用，接下来就将所有的应用注册到 apps 数组中，执行 <code class=\"language-text\">reroute()</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">apps<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>\n  <span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span>\n      loadErrorTime<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n      status<span class=\"token operator\">:</span> <span class=\"token constant\">NOT_LOADED</span><span class=\"token punctuation\">,</span>\n      parcels<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      devtools<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        overlays<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          selectors<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    registration\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isInBrowser<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">ensureJQuerySupport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">reroute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>start</h2>\n<p>因为<code class=\"language-text\">start</code>方法和<code class=\"language-text\">registeApplication</code>方法最后都调用了<code class=\"language-text\">reroute</code>，<code class=\"language-text\">start</code>的代码比较少，所以先介绍start方法。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// src/start.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> reroute <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./navigation/reroute.js\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> formatErrorMessage <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./applications/app-errors.js\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> setUrlRerouteOnly <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./navigation/navigation-events.js\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> isInBrowser <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./utils/runtime-environment.js\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> started <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">opts</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  started <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>opts <span class=\"token operator\">&amp;&amp;</span> opts<span class=\"token punctuation\">.</span>urlRerouteOnly<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setUrlRerouteOnly</span><span class=\"token punctuation\">(</span>opts<span class=\"token punctuation\">.</span>urlRerouteOnly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isInBrowser<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">reroute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">isStarted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> started<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isInBrowser<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>started<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span>\n        <span class=\"token function\">formatErrorMessage</span><span class=\"token punctuation\">(</span>\n          <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n          __DEV__ <span class=\"token operator\">&amp;&amp;</span>\n            <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">singleSpa.start() has not been called, 5000ms after single-spa was loaded. Before start() is called, apps can be declared and loaded, but not bootstrapped or mounted.</span><span class=\"token template-punctuation string\">`</span></span>\n        <span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>首先申明了一个 <code class=\"language-text\">started</code> 变量作为应用启动的标记，默认是 <code class=\"language-text\">false</code>，表示未启动。<code class=\"language-text\">isStarted()</code>返回这个标记，用来判断当前应用的状态。</p>\n<p>start`方法接受一个options参数，目前只有一个配置：urlRerouteOnly。默认是false。如果设置成true，调用history.pushState() 和 history.replaceState() 时不会触发 reroute，除非客户端路由真的发生了变化。设置为true时在某些时候会有更好的性能。</p>\n<p><code class=\"language-text\">urlRerouteOnly</code>会在navigation-events中使用，后面再讲。</p>\n<p>在文件的最后作了一个超时检测，在代码执行5s后<code class=\"language-text\">isStarted</code>状态依旧是<code class=\"language-text\">false</code>时抛出一个警告。</p>\n<p>接下来看一下核心方法Reroute</p>\n<h2>reroute</h2>\n<p>默认设置 <code class=\"language-text\">appChangeUnderway</code>为<code class=\"language-text\">false</code>。函数每次执行时都会判断<code class=\"language-text\">appChangeUnderway</code>。<code class=\"language-text\">appChangeUnderway</code>为<code class=\"language-text\">true</code>时表示当前有<code class=\"language-text\">reroute</code>的任务正在执行(reroute被调用了并且其中的promsie任务还没结束），此时返回一个Promise，内部将resolve，reject和reoute的第二个参数一起 push 到<code class=\"language-text\">peopleWaitingOnAppChange</code>中，等当前reroute对应的任务执行完成之后在作为 <code class=\"language-text\">pendingPromise</code> 参数继续执行。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>appChangeUnderway<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    peopleWaitingOnAppChange<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      resolve<span class=\"token punctuation\">,</span>\n      reject<span class=\"token punctuation\">,</span>\n      eventArguments<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>但是<code class=\"language-text\">appChangeUnderway</code>初始值是<code class=\"language-text\">false</code>，在什么时候被修改成true的呢？接着往下看。</p>\n<p>调用<code class=\"language-text\">getAppChanges()</code>方法将注册的应用按照当前各自的生命周期分组:</p>\n<ol>\n<li>加载失败（LOAD_ERROR) 的app放入appToUnload</li>\n<li>未下载（NOT_LOADED)和下载中（LOADING_SOURCE_CODE)的app放入 appsToLoad</li>\n<li>未引导（NOT_BOOTSTRAPPED)和未挂载（NOT_MOUNTED)的app放入appsToUnload或者appsToMount</li>\n<li>已挂载（MOUNTED)的app放入appsToUnmount</li>\n</ol>\n<p>未引导（NOT_BOOTSTRAPPED)和未挂载（NOT_MOUNTED)的app会多加一个判断，当前window.location匹配activeWhen规则时放入appToMount数组，否则放入appsToUnload。</p>\n<p>分组完毕之后，判断前文提到的started状态。如果started为true，将appChangeUnderway也设置为true，然后将app按照toUnload，toLoad,toUnmount和toMount的分组数组合并在一起，保存到appsThatChanged数组中。最后调用 performAppChanges 方法，返回执行的结果。如果started为false，将ToLoad的app赋值给appsThatChanged，然后调用loadApps方法，并返回执行的结果。</p>\n<h3>loadApps 和 performAppChanges</h3>\n<h4>loadApps</h4>\n<p>先来看较为简单的loadApps()方法。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">loadApps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> loadPromises <span class=\"token operator\">=</span> appsToLoad<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>toLoadPromise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>loadPromises<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>callAllEventListeners<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// there are no mounted apps, before start() is called, so we always return []</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">callAllEventListeners</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">loadApps</code>只有在启动的时候会调用一次，此时<code class=\"language-text\">started</code> 为 <code class=\"language-text\">false</code>。这个方法具体做了什么事情呢？</p>\n<p>遍历appsToLoad中的app，最后返回一个Promise数组，通过Promise.all()一次性全部调用将app的状态设置为 <code class=\"language-text\">LOADING_SOURCE_CODE</code>，然后检查参数中的生命周期函数，将这些函数挂载到app上。然后再调用 <code class=\"language-text\">callAllEventListeners</code> 方法，劫持 <code class=\"language-text\">hashchange</code> 和<code class=\"language-text\">popstate</code>这两个事件。</p>\n<h4>performAppChanges</h4>\n<p>如果应用已经启动，即 <code class=\"language-text\">started</code>为 <code class=\"language-text\">true</code> 时，逻辑会进入到 <code class=\"language-text\">performAppChanges</code> 方法，这个方法有点长。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">performAppChanges</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// https://github.com/single-spa/single-spa/issues/545</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">new</span> <span class=\"token class-name\">CustomEvent</span><span class=\"token punctuation\">(</span>\n        appsThatChanged<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span>\n          <span class=\"token operator\">?</span> <span class=\"token string\">\"single-spa:before-no-app-change\"</span>\n          <span class=\"token operator\">:</span> <span class=\"token string\">\"single-spa:before-app-change\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">getCustomEventDetail</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">new</span> <span class=\"token class-name\">CustomEvent</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"single-spa:before-routing-event\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">getCustomEventDetail</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> cancelNavigation <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>navigationIsCanceled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      window<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">CustomEvent</span><span class=\"token punctuation\">(</span>\n          <span class=\"token string\">\"single-spa:before-mount-routing-event\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token function\">getCustomEventDetail</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">finishUpAndReturn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">navigateToUrl</span><span class=\"token punctuation\">(</span>oldUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> unloadPromises <span class=\"token operator\">=</span> appsToUnload<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>toUnloadPromise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> unmountUnloadPromises <span class=\"token operator\">=</span> appsToUnmount\n      <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>toUnmountPromise<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">unmountPromise</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> unmountPromise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>toUnloadPromise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> allUnmountPromises <span class=\"token operator\">=</span> unmountUnloadPromises<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>unloadPromises<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> unmountAllPromise <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>allUnmountPromises<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    unmountAllPromise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      window<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">CustomEvent</span><span class=\"token punctuation\">(</span>\n          <span class=\"token string\">\"single-spa:before-mount-routing-event\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token function\">getCustomEventDetail</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* We load and bootstrap apps while other apps are unmounting, but we\n      * wait to mount the app until all apps are finishing unmounting\n      */</span>\n    <span class=\"token keyword\">const</span> loadThenMountPromises <span class=\"token operator\">=</span> appsToLoad<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">app</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">toLoadPromise</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">app</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token function\">tryToBootstrapAndMount</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">,</span> unmountAllPromise<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* These are the apps that are already bootstrapped and just need\n      * to be mounted. They each wait for all unmounting apps to finish up\n      * before they mount.\n      */</span>\n    <span class=\"token keyword\">const</span> mountPromises <span class=\"token operator\">=</span> appsToMount\n      <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">appToMount</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> appsToLoad<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>appToMount<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">appToMount</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">tryToBootstrapAndMount</span><span class=\"token punctuation\">(</span>appToMount<span class=\"token punctuation\">,</span> unmountAllPromise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> unmountAllPromise\n      <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">callAllEventListeners</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/* Now that the apps that needed to be unmounted are unmounted, their DOM navigation\n          * events (like hashchange or popstate) should have been cleaned up. So it's safe\n          * to let the remaining captured event listeners to handle about the DOM event.\n          */</span>\n        <span class=\"token function\">callAllEventListeners</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>loadThenMountPromises<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>mountPromises<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            pendingPromises<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">promise</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>finishUpAndReturn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以看到，这个方法也是放在一个 <code class=\"language-text\">Promise.resolve()</code>中。首先触发了一些自定义事件，然后根据应用状态分别创建了对应取消操作的Promise数组。需要被移除的应用 <code class=\"language-text\">appToUnLoad</code>创建了<code class=\"language-text\">unLoadPromises</code>，需要被卸载的应用<code class=\"language-text\">appsToUnmount</code>先创建卸载的<code class=\"language-text\">toUnmountPromise</code>，再创建 <code class=\"language-text\">unLoadPromise</code>。最后将所有的Promise合并成一个数组通过Promise.all执行，执行完成之后触发<code class=\"language-text\">single-spa:before-mount-routing-event</code>事件。</p>\n<p>至此，需要unmount和unload的app执行过程都结束了，接下来如法炮制开始load和mount对应的应用。使用 <code class=\"language-text\">appToLoad</code> 和 <code class=\"language-text\">appToMount</code> 创建一个Promise数组，通过Promise.all执行。在app对应状态变更完成之后，调用 <code class=\"language-text\">tryToBootstrapAndMount</code>完成引导并挂载应用。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">tryToBootstrapAndMount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">app<span class=\"token punctuation\">,</span> unmountAllPromise</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">shouldBeActive</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">toBootstrapPromise</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">app</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      unmountAllPromise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token function\">shouldBeActive</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token function\">toMountPromise</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> app\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> unmountAllPromise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>引导并挂载成功之后触发一次<code class=\"language-text\">single-spa:routing-event</code>事件，根据变化的app数量决定触发<code class=\"language-text\">single-spa:no-app-change</code>事件还是<code class=\"language-text\">single-spa:app-change</code>事件。最后将<code class=\"language-text\">appChangeUnderway</code>设置为<code class=\"language-text\">false</code>，保证后续的reroute()调用能够执行，此时也标志着当前这次reroute调用的执行已结束，最后检查当前是否还有pengding中的任务，有的话继续执行。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>peopleWaitingOnAppChange<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* While we were rerouting, someone else triggered another reroute that got queued.\n    * So we need reroute again.\n    */</span>\n  <span class=\"token keyword\">const</span> nextPendingPromises <span class=\"token operator\">=</span> peopleWaitingOnAppChange<span class=\"token punctuation\">;</span>\n  peopleWaitingOnAppChange <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">reroute</span><span class=\"token punctuation\">(</span>nextPendingPromises<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"single-spa源码解析-registerApplication和start","date":"November 21, 2020","description":null,"categories":[],"tags":[]}},"previous":{"fields":{"slug":"/blogs/2020-11-28-如何在项目中接入single-spa/"},"frontmatter":{"title":"如何在项目中接入single-spa"}},"next":{"fields":{"slug":"/blogs/2020-11-05-使用Single-SPA实现微前端/"},"frontmatter":{"title":"使用 single-spa 实现微前端","draft":false,"tags":[],"categories":["技术研究"],"status":"publish"}}},"pageContext":{"id":"f6215d5d-64b3-53f8-a5d1-80290b31125a","previousPostId":"ac0f57ce-635f-57c2-b604-893a23636a3c","nextPostId":"738caaf3-8025-5c45-bb42-c0b207bcfaae"}},
    "staticQueryHashes": ["2841359383"]}