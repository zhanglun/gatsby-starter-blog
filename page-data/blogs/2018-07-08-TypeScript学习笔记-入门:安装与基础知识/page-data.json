{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/blogs/2018-07-08-TypeScript学习笔记-入门:安装与基础知识/",
    "result": {"data":{"site":{"siteMetadata":{"title":"张小伦的网络日志","description":"欢迎来到张小伦的网络日志 \n\t\t一个记录生活，分享心得的博客","menu":[{"id":"home","name":"首页","url":"/"},{"id":"category","name":"分类","url":"/categories"},{"id":"archive","name":"归档","url":"/archives"},{"id":"about","name":"关于我","url":"/about"}]}},"markdownRemark":{"id":"c3a661e5-2ead-53b9-8b15-75ff79894a62","html":"<p>TypeScript 是由微软推出的开源编程语言，官网的定义如下：</p>\n<blockquote>\n<p>TypeScript is a typed superset of JavaScript that compiles to plain JavaScript. Any browser. Any host. Any OS. Open source.</p>\n</blockquote>\n<blockquote>\n<p>TypeScript 是 JavaScript 的类型的超集，它可以编译成纯 JavaScript。编译出来的 JavaScript 可以运行在任何浏览器上。TypeScript 编译工具可以运行在任何服务器和任何系统上。TypeScript 是开源的。</p>\n</blockquote>\n<!--more-->\n<h3>安装 TypeScript</h3>\n<p>使用 npm 安装 typescript。一步到位，可通过 <code class=\"language-text\">tsc --help</code> 查看帮助。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g typescript</code></pre></div>\n<h3>简单的例子</h3>\n<p>前面说到，TypeScript 是 JavaScript 的超集。何谓超集？来回顾一下初中数学：</p>\n<blockquote>\n<p>如果一个集合S2中的每一个元素都在集合S1中，且集合S1中可能包含S2中没有的元素，则集合S1就是S2的一个超集，反过来，S2是S1的子集。</p>\n</blockquote>\n<p>而这也体现在TypeScript的语言上，TypeScript 包含 JavaSscript 的所有。也就是说，即使是按照 JavaScript 编写的代码，也能够被视作 TypeScript 来编译执行。举一个简单的例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// hello.ts</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">sayHeloo</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zhanglun`'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>上述代码在TypeScript编译器会中会被编译输出如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// hello.js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello, \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zhanglun'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>加入类型检查</h3>\n<p>上面的例子只是提到了 TypeScript代码 转换为 JavaScript 代码。接下来说一说 TypeScript 区别于 JavaScript 的精髓所在：类型检查。</p>\n<p>众所周知，JavaScript 是一门弱类型语言的，在代码执行的过程中，时常会执行一些隐身类型转换，而这往往会产生一些难以预料的问题，同时难以排查出存在问题的代码。而 TypeScript 加入了编译的过程，在编译过程中进行静态类型检查。如果发现有错误，编译的时候就会报错。</p>\n<blockquote>\n<p>TypeScript 中，使用 : 指定变量的类型，: 的前后有没有空格都可以。</p>\n</blockquote>\n<p>举一个简单的例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">person<span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'Hello, '</span> <span class=\"token operator\">+</span> person<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这段代码的编译会出错。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">hello.ts:7:22 - error TS2345: Argument of <span class=\"token builtin class-name\">type</span> <span class=\"token string\">'number[]'</span> is not assignable to parameter of <span class=\"token builtin class-name\">type</span> <span class=\"token string\">'string'</span><span class=\"token builtin class-name\">.</span>\n\n<span class=\"token number\">7</span> console.log<span class=\"token punctuation\">(</span>sayHello<span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>TypeScript 编译过程即使报错了，还是会生成编译结果，我们仍然可以使用这个编译之后的文件。</p>\n<p>如果要在报错的时候终止 JavaScript 文件的生成，可以在 tsconfig.json 中配置 noEmitOnError 即可。更新 config 相关配置请移步<a href=\"http://www.typescriptlang.org/docs/handbook/tsconfig-json.html\">官方手册</a>。</p>\n<h3>类型声明</h3>\n<p>JavaScript 的类型分为两种：原始数据类型（Primitive data types）和对象类型（Object types）。</p>\n<p>原始数据类型包括：布尔值、数值、字符串、null、undefined 以及 ES6 中的新类型 Symbol。</p>\n<p>在 TypeScript 中，声明上述各种变量稍有不同。</p>\n<h4>Boolean</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> isDone<span class=\"token operator\">:</span>boolean <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 声明一个变量，这个变量是一个boolen</span>\n<span class=\"token keyword\">let</span> createdByNewBoolean<span class=\"token operator\">:</span> boolean <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// index.ts(1,5): error TS2322: Type 'Boolean' is not assignable to type 'boolean'。 new Boolean() 返回的是一个 Boolean 对象。</span>\n<span class=\"token keyword\">let</span> createdByBoolean<span class=\"token operator\">:</span> boolean <span class=\"token operator\">=</span> <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 直接调用 Boolean 也可以返回一个 boolean 类型：</span></code></pre></div>\n<h4>Number</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> decLiteral<span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> hexLiteral<span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">0xf00d</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ES6 中的二进制表示法</span>\n<span class=\"token keyword\">let</span> binaryLiteral<span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">0b1010</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ES6 中的八进制表示法</span>\n<span class=\"token keyword\">let</span> octalLiteral<span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">0o744</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> notANumber<span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> infinityNumber<span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">Infinity</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>String</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> myName<span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> myAge<span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 模板字符串</span>\n<span class=\"token keyword\">let</span> sentence<span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello, my name is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>myName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.\nI'll be </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>myAge <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> years old next month.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>Void</h4>\n<p>JavaScript 没有空值（Void）的概念，在 TypeScirpt 中，可以用 void 表示没有任何返回值的函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">alertName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'My name is Tom'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>声明一个 void 类型的变量没有什么用，因为你只能将它赋值为 undefined 和 null：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> unusable<span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>Null 和 Undefined</h4>\n<p>在 TypeScript 中，可以使用 null 和 undefined 来定义这两个原始数据类型：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> u<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> n<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>undefined 类型的变量只能被赋值为 undefined，null 类型的变量只能被赋值为 null。</p>\n<p>与 void 的区别是，undefined 和 null 是所有类型的子类型。也就是说 undefined 类型的变量，可以赋值给 number 类型的变量：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 这样不会报错</span>\n<span class=\"token keyword\">let</span> num<span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 这样也不会报错</span>\n<span class=\"token keyword\">let</span> u<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> num<span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> u<span class=\"token punctuation\">;</span></code></pre></div>\n<p>而 void 类型的变量不能赋值给 number 类型的变量：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> u<span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> num<span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> u<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// index.ts(2,5): error TS2322: Type 'void' is not assignable to type 'number'.</span></code></pre></div>\n<h4>任意值</h4>\n<p>TypeScript 提供了一个 any 类型，表示允许赋值为任意类。声明一个变量为任意值之后，对它的任何操作，返回的内容的类型都是任意值。要注意的是： 变量如果在声明的时候，未指定其类型，那么它会被识别为任意值类型。</p>\n<p>如果是一个普通类型，在赋值过程中改变类型是不被允许的：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> myFavoriteNumber<span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">'seven'</span><span class=\"token punctuation\">;</span>\n\nmyFavoriteNumber <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// index.ts(2,1): error TS2322: Type 'number' is not assignable to type 'string'.</span></code></pre></div>\n<p>但如果是 any 类型，则允许被赋值为任意类型。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> myFavoriteNumber<span class=\"token operator\">:</span> any <span class=\"token operator\">=</span> <span class=\"token string\">'seven'</span><span class=\"token punctuation\">;</span>\n\nmyFavoriteNumber <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>聪明的类型推导</h4>\n<p>如果没有明确的指定类型，那么 TypeScript 会依照类型推论（Type Inference）的规则推断出一个类型。</p>\n<p>以下代码虽然没有指定类型，但是会在编译的时候报错：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> myFavoriteNumber <span class=\"token operator\">=</span> <span class=\"token string\">'seven'</span><span class=\"token punctuation\">;</span>\n\nmyFavoriteNumber <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// index.ts(2,1): error TS2322: Type 'number' is not assignable to type 'string'.</span></code></pre></div>\n<p>事实上，它等价于：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> myFavoriteNumber<span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">'seven'</span><span class=\"token punctuation\">;</span>\n\nmyFavoriteNumber <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// index.ts(2,1): error TS2322: Type 'number' is not assignable to type 'string'.</span></code></pre></div>\n<p>TypeScript 会在没有明确的指定类型的时候推测出一个类型，这就是类型推论。</p>\n<p>如果定义的时候没有赋值，不管之后有没有赋值，都会被推断成 any 类型而完全不被类型检查：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> myFavoriteNumber<span class=\"token punctuation\">;</span>\n\nmyFavoriteNumber <span class=\"token operator\">=</span> <span class=\"token string\">'seven'</span><span class=\"token punctuation\">;</span>\nmyFavoriteNumber <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"title":"TypeScript学习笔记-入门:安装与基础知识","date":"July 08, 2018","description":null,"categories":[],"tags":["TypeScript"]}},"previous":{"fields":{"slug":"/blogs/2018-07-15-TypeScript学习笔记-在Webpack中配置TypeScript/"},"frontmatter":{"title":"TypeScript学习笔记-在Webpack中配置TypeScript"}},"next":{"fields":{"slug":"/blogs/2018-02-04-个人服务器常用基础配置/"},"frontmatter":{"title":"个人服务器常用基础配置","draft":null,"tags":["Linux","配置"],"categories":["全栈"],"status":"publish"}}},"pageContext":{"id":"c3a661e5-2ead-53b9-8b15-75ff79894a62","previousPostId":"158ce494-b9c9-54ee-b68c-3e333c497589","nextPostId":"15d14051-3939-58fd-b02a-32593af14b60"}},
    "staticQueryHashes": ["2841359383"]}