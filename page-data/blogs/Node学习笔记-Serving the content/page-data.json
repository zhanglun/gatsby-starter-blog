{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/blogs/Node学习笔记-Serving the content/",
    "result": {"data":{"site":{"siteMetadata":{"title":"张小伦的网络日志","description":"欢迎来到张小伦的网络日志 \n\t\t一个记录生活，分享心得的博客","menu":[{"id":"home","name":"首页","url":"/"},{"id":"category","name":"分类","url":"/categories"},{"id":"archive","name":"归档","url":"/archives"},{"id":"about","name":"关于我","url":"/about"}]}},"markdownRemark":{"id":"4f4c6c60-b80b-5de8-97e5-416ad84b4c52","html":"<h2>Node中的MiddleWare</h2>\n<blockquote>\n<p>In the context of a web server, middleware is a layer between the guts</p>\n</blockquote>\n<p>of the server and the code you’re writing to run on it that provides a set\r\nof abstractions anyone writing code for the platform will be likely to\r\nneed. It differs from other modules you might pull into your application\r\nin that it exists as a buffer between Node and your app, not a utility used\r\nwithin your app.</p>\n<p>在一个Web服务器的上下文中，中间件是服务器和你写在其上运行的代码的中间一层，为那些编写代码的人提供一组抽象（a set of abstractions）。它不同于其他那些引入到你的应用中的模块，middleware作为一个缓存区存在于Node与你的应用之间，</p>\n<p>Connect 是最受欢迎的Node中间件框架，为其他的web 框架比如Express提供了基础。Connect提供的工具之一就是 static 模块，用于处理静态文件，如果我们添加了Connect，对静态文件的引用可以酱紫：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> connect <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connect'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">var</span> app <span class=\"token operator\">=</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">middleware1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token comment\">// middleware 1</span>\r\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">middleware2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token comment\">// middleware 2</span>\r\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://github.com/senchalabs/connect\">Github:</a></p>\n<h2>Receiving Data from the Querystring</h2>\n<p>向服务端传送数据最简单的办法就是在url中添加querystring，这种方式不需要在客户端做太多操作。</p>\n<p>Node官方提供了一个叫做<code class=\"language-text\">querystring</code>的模块，我们不需要做太多的工作就能够很轻松的解析出querystring中的数据，我们要做的一件事请就是“trim the querystring”，因为querystring模块提供了解析querystring字段的方法<code class=\"language-text\">parse()</code>,当时没有已经将querystring从URl中分离出来。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\nquerystring <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"querystring\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\nhttp<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\">// parse everything after the \"?\" into key/value pairs</span>\r\n    <span class=\"token keyword\">var</span> qs <span class=\"token operator\">=</span> querystring<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token comment\">// property names are the same as in the querystring</span>\r\n    userName <span class=\"token operator\">=</span> qs<span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> qs<span class=\"token punctuation\">.</span>lastName<span class=\"token punctuation\">,</span>\r\n    html <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;!doctype html>\"</span> <span class=\"token operator\">+</span>\r\n    <span class=\"token string\">\"&lt;html>&lt;head>&lt;title>Hello \"</span> <span class=\"token operator\">+</span> userName <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;/title>&lt;/head>\"</span> <span class=\"token operator\">+</span>\r\n    <span class=\"token string\">\"&lt;body>&lt;h1>Hello, \"</span> <span class=\"token operator\">+</span> userName <span class=\"token operator\">+</span> <span class=\"token string\">\"!&lt;/h1>&lt;/body>&lt;/html>\"</span><span class=\"token punctuation\">;</span>\r\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Routing and Receiving Data from a Path</h2>\n<p><code class=\"language-text\">Routing</code>是中间件提供的另一个功能，但是自己实现起来也不是很复杂。Routing可以让我们解析出除了querystring之外的URL路径中的数据。一个最简单的route包含三个部分：一个request方法；一个route匹配的模式（正则表达式）和一个请求匹配成功时调用的回调函数。</p>\n<p>要解析URL，必须引入URL模块</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> url <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"url\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>前面讲到的使用querystring的例子，可以修改成Route版，通过检查URL来寻找信息。假设我们的路径是“sayhello/firstname/lastname”</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    url <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"url\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\nhttp<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\">// split out parts of the path</span>\r\n    <span class=\"token keyword\">var</span> path <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>pathname<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token comment\">// handle GET requests to /sayHello/</span>\r\n\r\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">\"GET\"</span> <span class=\"token operator\">&amp;&amp;</span> path<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"sayHello\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">var</span> userName <span class=\"token operator\">=</span> path<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> path<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n        html <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;!doctype html>\"</span> <span class=\"token operator\">+</span>\r\n        <span class=\"token string\">\"&lt;html>&lt;head>&lt;title>Hello \"</span> <span class=\"token operator\">+</span> userName <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;/title>&lt;/head>\"</span> <span class=\"token operator\">+</span>\r\n        <span class=\"token string\">\"&lt;body>&lt;h1>Hello, \"</span> <span class=\"token operator\">+</span> userName <span class=\"token operator\">+</span> <span class=\"token string\">\"!&lt;/h1>&lt;/body>&lt;/html>\"</span><span class=\"token punctuation\">;</span>\r\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>但是可以看到这样的代码是多么的不健壮，根本没有拓展性可言。我们可以使用Connect来提高代码的可用性。</p>\n<h2>Receiving Data from a POST</h2>\n<p>最传统的获取用户数据的方式就是接受来自表单的一个POST请求，这可能不是你使用Node时做的第一件事，但是这个还是一件很必要的事情。亲自尝试使用Node处理POST请求时，可以很好的感受到Node与其他服务端开发的不同之处。<code class=\"language-text\">ServerRequest</code> 对象（回调函数中的req参数）的属性，没有包含POST传递过来的参数，但是它是一个<code class=\"language-text\">EventEmitter</code>-事件发射器。它是Node中的一个基本的对象，其作用就像它的名字一样-发射事件。我们不是去检查req的属性是否含有传递过来的数据，而是添加一个事件监听器来监听请求。</p>\n<p>所有的事件发射器的监听器，包括<code class=\"language-text\">ServerRequest</code>的监听器，都通过 on() 创建，这个方法至少需要一个事件的类型和一个回调函数作为参数（addListener()方法也是一样）。请求的数据将会出现在chunk中，我们不用等待接收完所有的数据就可执行后面的代码。现在，创建一个监听器，用于数据的接受，请求的结束和保存所有的数据块。但是只有在请求完成之后才能显示数据。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    querystring <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"querystring\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token comment\">// serve static form</span>\r\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token function\">getFile</span><span class=\"token punctuation\">(</span>__dirname <span class=\"token operator\">+</span> <span class=\"token string\">\"/public/simpleForm.html\"</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token comment\">// handle form post</span>\r\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        req<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">chunk</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token comment\">// append received data</span>\r\n            data <span class=\"token operator\">+=</span> chunk<span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        req<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"end\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token comment\">// get key/value pairs from received data</span>\r\n            <span class=\"token keyword\">var</span> params <span class=\"token operator\">=</span> querystring<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n            userName <span class=\"token operator\">=</span> params<span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> params<span class=\"token punctuation\">.</span>lastName<span class=\"token punctuation\">,</span>\r\n            html <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;!doctype html>\"</span> <span class=\"token operator\">+</span>\r\n            <span class=\"token string\">\"&lt;html>&lt;head>&lt;title>Hello \"</span> <span class=\"token operator\">+</span> userName <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;/title>&lt;/head>\"</span> <span class=\"token operator\">+</span>\r\n            <span class=\"token string\">\"&lt;body>&lt;h1>Hello, \"</span> <span class=\"token operator\">+</span> userName <span class=\"token operator\">+</span> <span class=\"token string\">\"!&lt;/h1>&lt;/body>&lt;/html>\"</span><span class=\"token punctuation\">;</span>\r\n            res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>同样的我们也可以利用中间件来完成，可以使用 <code class=\"language-text\">bodyParse</code>。</p>","frontmatter":{"title":"Node学习笔记-Serving the content","date":"October 28, 2014","description":null,"categories":["Node.js"],"tags":["笔记","Node.js"]}},"previous":{"fields":{"slug":"/blogs/Node学习笔记-Server-Side Templates/"},"frontmatter":{"title":"Node学习笔记-Server-Side Templates"}},"next":{"fields":{"slug":"/blogs/规范之路-重新认识了Float/"},"frontmatter":{"title":"规范之路-重新认识了Float","draft":null,"tags":["CSS","笔记"],"categories":[],"status":"publish"}}},"pageContext":{"id":"4f4c6c60-b80b-5de8-97e5-416ad84b4c52","previousPostId":"3e7b58bd-4b35-56f3-b0f2-967918f77fa0","nextPostId":"19b0e181-9924-5a00-871d-ec208b1e8619"}},
    "staticQueryHashes": ["2841359383"]}