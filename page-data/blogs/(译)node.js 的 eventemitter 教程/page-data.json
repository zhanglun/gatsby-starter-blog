{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/blogs/(译)node.js 的 eventemitter 教程/",
    "result": {"data":{"site":{"siteMetadata":{"title":"张小伦的网络日志","description":"欢迎来到张小伦的网络日志 \n\t\t一个记录生活，分享心得的博客","menu":[{"id":"home","name":"首页","url":"/"},{"id":"category","name":"分类","url":"/categories"},{"id":"archive","name":"归档","url":"/archives"},{"id":"about","name":"关于我","url":"/about"}]}},"markdownRemark":{"id":"01c9fc74-fd34-5791-a99c-57679735c67e","html":"<blockquote>\n<p>原文标题：Node.js EventEmitter Tutorial</p>\n</blockquote>\n<p>原文链接：<a href=\"http://www.hacksparrow.com/node-js-eventemitter-tutorial.html\">http://www.hacksparrow.com/node-js-eventemitter-tutorial.html</a></p>\n<!--more-->\n<p>听说过 Node.js 中的 <code>EventEmitter</code> 吗？也许你知道大部分内置的 Node.js 库 都使用它，也许你总是对 <code>EventEmitter</code> 充满好奇，但是没有谁向你解释？</p>\n<p>在这个教程中，我会给你一些关于 <code>EventEmitter</code> 类的例子。</p>\n<p>你必须熟悉各种 Node.js 中的事件比如： <code>on data</code> ， <code>on end</code> ， <code>on error</code> 等等之类的。事件机制的工作做得天衣无缝，十分完美，难道不是吗？所有的基于事件的 Node.js 库都依赖于 <code>EventEmitter</code> 类，你可能会说那些库都继承了 <code>EventEmitter</code>。</p>\n<p><code>EventEmitter</code> 的强大之处不仅限于内置的 Node.js 库，你也可以拥有它！</p>\n<p>展示 <code>EventEmitter</code> 能力的最好方法就是通过一个例子，看看这个：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var EventEmitter = require('events').EventEmitter;\nvar radium = new EventEmitter();\n\n//绑定 radiation 事件\nradium.on('radiation', function(ray) {\n    console.log(ray);\n});\n\nsetInterval(function() {\n    //触发 radiation 事件\n    radium.emit('radiation', 'GAMMA');\n}, 1000);</code></pre></div>\n<p>注意到了吧，创建一个事件，添加一个事件监听器，触发事件，通过事件传递数据是多么的简单。所有的这些因为 <code>EventEmitter</code> 的魔力而实现。 <code>EventEmitter</code> 让编写令人惊讶的 Node.js 库变得可能。</p>\n<p>上面的例子基于一个 <code>EventEmitter</code> 的实例，我们怎么做才能创建一个继承自 <code>EventEmitter</code> 的类呢？Node.js 有一个，叫做 <code>util</code> 的库，它有一个方法： <code>inherits</code>，实现对象之间原型继承的函数。我们可以很轻松的通过它让一个类继承另一个类（准确的说不能叫类）：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var util = require('util');\nutil.inherits(MyClass, SuperClass);</code></pre></div>\n<p>使用 <code>util.inherits()</code> ，我们创建了一个继承自 <code>EventEmitter</code> 的模块，注意下面的代码：</p>\n<p><em>radio.js</em> 中的内容：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var util = require('util');\nvar EventEmitter = require('events').EventEmitter;\n\n//一个包含 \"freq\" 和 \"name\" 属性的对象\nvar Radio = function(station) {\n    //保存 指向Radio的this，在setTimeout()中使用\n    var self = this;\n    \n    setTimeout(function() {\n        self.emit('open', station);\n    }, 0);\n    \n    setTimeout(function() {\n        self.emit('close', station);\n    }, 5000);\n    \n    this.on('newListener', function(listener) {\n        console.log('Event Listener: ' + listener);\n    });\n    \n};\n\n//Radio 继承 EventEmitter\nutil.inherits(Radio, EventEmitter);\nmodule.exports = Radio;</code></pre></div>\n<p>我们创建了一个继承自 <code>EventEmitter</code> 的模块。接下来让我们看看如何在一个例子中使用创建的模块。</p>\n<p><em>example.js</em> 中的内容：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var Radio = require('./radio.js');\n\nvar station = {\n    freq: '80.16',\n    name: 'Rock N Roll Radio',\n};\n// 创建一个Radio实例\nvar radio = new Radio(station);\n\n//添加一个“open”事件监听器\nradio.on('open', function(station) {\n    console.log('\"%s\" FM %s OPENED', station.name, station.freq);\n    console.log('? ??');\n});\n\n//添加一个“close”事件监听器\nradio.on('close', function(station) {\n    console.log('\"%s\" FM %s CLOSED', station.name, station.freq);\n});</code></pre></div>\n<p>运行 example.js 准备好见证 <code>EventEmitter</code> 的魔力。</p>\n<p>如果因为某些原因你不想使用 <code>util</code> 模块，你可以用这种方法来拓展一个类。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Apple.prototype = Object.create(require('events').EventEmitter.prototype);</code></pre></div>\n<p><code>EventEmitter</code> 可以帮你编写令人印象深刻的基于事件的 Node.js 模块。同时，作为作为一个 Node.js 的开发人员，你掌握的关于<code>EventEmitter</code>的知识会大大影响你的工作效率。所以，确保你阅读了<a href=\"http://nodejs.org/api/events.html#events_class_events_eventemitter\">关于 <code>EventEmitter</code> 的更详细的资料</a>，并且掌握里里外外它是如何工作的。如果你不了解<code>EventEmitter</code>，那你也不了解 Nodejs.js</p>\n<p>(完)</p>\n<p><strong>翻译水平有待提高，所翻译的博文并不是按照原文一句一句翻译，而是添加了自己对文章的理解。如有不正之处，欢迎指正！</strong>\n<strong>个人笔记，仅供参考。</strong></p>\n<blockquote>\n<p>参考:</p>\n</blockquote>\n<p><a href=\"http://www.hacksparrow.com/node-js-eventemitter-tutorial.html\">http://www.hacksparrow.com/node-js-eventemitter-tutorial.html\n</a></p>","frontmatter":{"title":"【译】Node.js的 EventEmitter 教程","date":"May 05, 2014","description":null,"categories":["博客译文"],"tags":["译文","Node.js"]}},"previous":{"fields":{"slug":"/blogs/学习sass时了解到的一些好玩特性/"},"frontmatter":{"title":"学习sass时了解到的一些好玩特性"}},"next":{"fields":{"slug":"/blogs/(译)node.js的全局变量/"},"frontmatter":{"title":"【译】Node.js的全局变量","draft":null,"tags":["译文","Node.js"],"categories":["博客译文"],"status":"publish"}}},"pageContext":{"id":"01c9fc74-fd34-5791-a99c-57679735c67e","previousPostId":"ad4b1be8-f7ad-551c-8a73-b138af5fa688","nextPostId":"6c0e983c-34d7-5af8-ae56-aedcee7c768e"}},
    "staticQueryHashes": ["2841359383"]}