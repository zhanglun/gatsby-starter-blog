{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/blogs/Node学习笔记-Data Sources and Flow Control/",
    "result": {"data":{"site":{"siteMetadata":{"title":"张小伦的网络日志","description":"欢迎来到张小伦的网络日志 \n\t\t一个记录生活，分享心得的博客","menu":[{"id":"home","name":"首页","url":"/"},{"id":"category","name":"分类","url":"/categories"},{"id":"archive","name":"归档","url":"/archives"},{"id":"about","name":"关于我","url":"/about"}]}},"markdownRemark":{"id":"889fa597-2cd6-5eca-9214-ceb65bc5b7b7","html":"<blockquote>\n<p>额在之前的笔记中，提到了使用middleware，设置路由，发送数据，处理请求，渲染模板等。但是这些都不足以完成一个Web应用程序，动态数据交互需要和数据库联系在一起。当用户向服务器发送一个请求，响应的服务器可能就需要向数据库发送请求，此时，之后当数据库将数据返回给服务器，服务端才能够将响应给用户。好的，在这里就涉及到了服务端的流控制（server-side flow control）</p>\n</blockquote>\n<h2>Connecting to Database</h2>\n<p>在Node中没有的提供默认的链接数据的方法，同时又有很多类型的数据库都支持在Node中使用。至于如何选择还是要看具体情况具体分析。书上用的例子是Redis，这是一个很轻量级的数据，具体的我也不太懂。这里是它的<a href=\"http://redis.io/\">官网</a>，由于没有官方的window版本，我决定先试试用SQLite。</p>\n<p>之前有过一个sqlite的数据文件，里面是在豆瓣电影上抓取的一点点东西，正好可以用上。</p>\n<p>Node的包实在是太多了，往往有时候陷入选择困难症……。我选用的是叫做<code class=\"language-text\">sqlite3</code>的modules，NPM上提供的详细资料在<a href=\"https://www.npmjs.org/package/sqlite3\">这里</a>，<a href=\"https://github.com/mapbox/node-sqlite3/wiki/\">这里</a>还有其API文档。</p>\n<p>在server.js的目录下新建<code class=\"language-text\">db</code>文件夹，里面放着待会儿要用的db文件。在Node中使用sqlite时，也要先引用它对应的module。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> sqlite3 <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sqlite3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">verbose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">var</span> db <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">sqlite3<span class=\"token punctuation\">.</span>Database</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./db/douban.rdb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>路由的设置和之前的一样，采用<code class=\"language-text\">connect-route</code>，从数据库读取到数据完成之后，调用回调函数，回调函数中的参数<code class=\"language-text\">row</code>包含每一行的数据，</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!--movie.html template--></span>\r\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>豆瓣电影<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\r\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dl</span><span class=\"token punctuation\">></span></span>\r\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dt</span><span class=\"token punctuation\">></span></span>{{name}}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dt</span><span class=\"token punctuation\">></span></span>\r\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dd</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{{img}}<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{{name}}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dd</span><span class=\"token punctuation\">></span></span>\r\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dd</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{{href}}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>{{name}}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dd</span><span class=\"token punctuation\">></span></span>\r\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dd</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>{{type}}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span> <span class=\"token entity named-entity\" title=\"&nbsp;\">&amp;nbsp;</span><span class=\"token entity named-entity\" title=\"&nbsp;\">&amp;nbsp;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dd</span><span class=\"token punctuation\">></span></span>\r\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dl</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// server.js</span>\r\n<span class=\"token comment\">// 忽略外部函数，只显示核心代码</span>\r\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/movie'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">var</span> search <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">each</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from MOVIE\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> row</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">var</span> movie<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>\r\n            name<span class=\"token operator\">:</span>row<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\r\n            href<span class=\"token operator\">:</span>row<span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">,</span>\r\n            img<span class=\"token operator\">:</span>row<span class=\"token punctuation\">.</span>post_url<span class=\"token punctuation\">,</span>\r\n            type<span class=\"token operator\">:</span>row<span class=\"token punctuation\">.</span>type\r\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">var</span> readable <span class=\"token operator\">=</span> mu<span class=\"token punctuation\">.</span><span class=\"token function\">compileAndRender</span><span class=\"token punctuation\">(</span><span class=\"token string\">'movie.html'</span><span class=\"token punctuation\">,</span> movie<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        readable<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这应该算的上是Node中操作数据库最简单的例子，执行select语句读取数据，然后将数据渲染到模板中，呈现给用户。觉得还是有必要把sqlite3的API稍微翻译下做个笔记，不然每次都去查有点子麻烦。</p>\n<h2>Storing Data in Files</h2>\n<p>上面讲的是从数据库中取数据，现在来说说如何存储数据。其实我觉得这些问题，只要搞明白了一个，其他的也就不怎么困难了。取数据的时候我们是先访问数据库，然后查找，找到自己需要的数据之后返回就行，大体上就是这么个过程，那么反过来存储数据就是 先准备好打算存储的数据，然后访问数据库，将要存储的数据存入数据库就行了。整个过程都依赖相应数据库modules的API，看懂了API结合着操作几次，差不多就熟练了。我觉得这也没什么好说的。</p>\n<h2>node-sqlite3 简单的操作</h2>\n<blockquote>\n<p>来自<a href=\"https://github.com/mapbox/node-sqlite3/wiki/API\">node sqlite3 wiki api</a></p>\n</blockquote>\n<h3>new sqlite3.Database(filename, [mode], [callback])</h3>\n<p>返回一个新的Database对象，并且自动打开这个数据库。没有其他间接的方法来打开数据库。</p>\n<ul>\n<li><code class=\"language-text\">filename</code>： 正确的值是文件名，如果是“:memory:”，则在内存中创建一个匿名的数据库，匿名数据库不持久，关闭数据库程序之后内容就会消失。</li>\n<li><code class=\"language-text\">mode</code>：可选参数，可以是<code class=\"language-text\">sqlite3.OPEN_READONLY</code>, <code class=\"language-text\">sqlite3.OPEN_READWRITE</code> 和 <code class=\"language-text\">sqlite3.OPEN_CREATE</code>中的一个或者多个。默认值是 <code class=\"language-text\">OPEN_READWRITE | OPEN_CREATE</code>。</li>\n<li><code class=\"language-text\">callback</code>：可选参数，数据库成功打开或者打开时遇到错误调用，回调函数的第一个参数是一个err对象。当err对象为<code class=\"language-text\">null</code>时，数据库打开成功，此时触发一个没有参数的<code class=\"language-text\">open</code>事件，无论回调函数是否存在。</li>\n</ul>\n<h3>sqlite3.verbose()</h3>\n<p>设置执行模式。See the wiki page on <a href=\"https://github.com/developmentseed/node-sqlite3/wiki/Debugging\">debugging</a> for more information.</p>\n<h3>Database#close([callback])</h3>\n<p>关闭数据库</p>\n<ul>\n<li><code class=\"language-text\">callback</code>：可选参数。当数据库成功关闭或者关闭时遇到错误调用。回调函数的第一个参数是一个err对象。当err对象为<code class=\"language-text\">null</code>时，数据库关闭成功，此时触发一个没有参数的<code class=\"language-text\">open</code>事件，无论回调函数是否存在。</li>\n</ul>\n<h2>Database#run(sql, [param, …], [callback])</h2>\n<p>执行SQL语句，然后调用回调函数。返回的是一个Database对象，可以链式调用。</p>\n<ul>\n<li>\n<p><code class=\"language-text\">sql</code>：执行的SQL语句。如果SQL语句无效，同时run方法有一个回调函数。回调函数将被调用，参数是一个包含错误信息的err对象。如果没有回调函数来处理错误，一个<code class=\"language-text\">error</code>事件会在影响到后面的数据库相关语句，导致其无法正常工作。</p>\n</li>\n<li>\n<p><code class=\"language-text\">param, ...</code>：可选参数。当SQL语句包含占位符的时候，可以将参数在这里写出。在执行前，参数会被添加到语句中。有三种方式传递参数：直接作为函数的参数列举出来；以数组的形式；或者一个json对象。</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">      <span class=\"token comment\">// Directly in the function arguments.</span>\r\n      db<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UPDATE tbl SET name = ? WHERE id = ?\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n      <span class=\"token comment\">// As an array.</span>\r\n      db<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UPDATE tbl SET name = ? WHERE id = ?\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n      <span class=\"token comment\">// As an object with named parameters.</span>\r\n      db<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UPDATE tbl SET name = $name WHERE id = $id\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\r\n          $id<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\r\n          $name<span class=\"token operator\">:</span> <span class=\"token string\">\"bar\"</span>\r\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>参数的键可以这么书写 <code class=\"language-text\">:name</code>, <code class=\"language-text\">@name</code> and <code class=\"language-text\">$name</code>. 建议使用 <code class=\"language-text\">$name</code>因为JS中允许使用$来声明变量。</p>\n<ul>\n<li><code class=\"language-text\">callback</code> ：可选参数。在语句执行的任何一个步骤出错和查询执行后都会调用这个函数。遇到错误时，第一个（只有一个）参数是一个包含错误信息的err对象。如果执行成功，第一个参数是<code class=\"language-text\">null</code>。函数的上下文（this）指向的是statement对象。在第一次运行之后无妨再次运行这个statement，因为在第一次运行之后它被自动销毁了。\r\n如果执行成功，this对象将包含两个属性：<code class=\"language-text\">lastID</code>和<code class=\"language-text\">changes</code>，这两个属性包含这最后插入的行的ID和这条语句影响的行数（如果它们都不是undefined的话）。执行INSERT才会有lastID，执行UPDATE和DELETE才会有changes。其他情况下，这两个属性的都是不准确的，不应该被使用。\r\n在查询方法总，只有<code class=\"language-text\">.run()</code>的回调函数才有这两个值，其他的比如<code class=\"language-text\">.all()</code>，<code class=\"language-text\">.get()</code>等都没有这些值。</li>\n</ul>\n<p>更多详情请戳<a href=\"https://github.com/mapbox/node-sqlite3/wiki/API\">这里</a></p>\n<p>Bye~下次再来……</p>","frontmatter":{"title":"Node学习笔记-Data Sources and Flow Control","date":"November 06, 2014","description":null,"categories":["Node.js"],"tags":["笔记","Node.js"]}},"previous":{"fields":{"slug":"/blogs/Node学习笔记-Wrangling the File System/"},"frontmatter":{"title":"Node学习笔记-Wrangling the File System"}},"next":{"fields":{"slug":"/blogs/Node学习笔记-Server-Side Templates/"},"frontmatter":{"title":"Node学习笔记-Server-Side Templates","draft":null,"tags":["笔记","Node.js"],"categories":["Node.js"],"status":"publish"}}},"pageContext":{"id":"889fa597-2cd6-5eca-9214-ceb65bc5b7b7","previousPostId":"bf2ae161-f80a-5041-abe0-f22c8bc6e8cd","nextPostId":"3e7b58bd-4b35-56f3-b0f2-967918f77fa0"}},
    "staticQueryHashes": ["2841359383"]}