{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/blogs/定时将图片保存在SAE的Storage中/",
    "result": {"data":{"site":{"siteMetadata":{"title":"张小伦的网络日志","description":"欢迎来到张小伦的网络日志 \n\t\t一个记录生活，分享心得的博客","menu":[{"id":"home","name":"首页","url":"/"},{"id":"category","name":"分类","url":"/categories"},{"id":"archive","name":"归档","url":"/archives"},{"id":"about","name":"关于我","url":"/about"}]}},"markdownRemark":{"id":"ff497475-4873-596d-9757-115fb47a05da","html":"<blockquote>\n<p>前几天一直在看Node相关的书，做了一些笔记，挂在自己的博客上。挺累的，毕竟看的是两本英文的书。而且疲了，一时间学的太猛，以至于晕头转向的。Node中我觉得有一个很麻烦的问题就是：包太多，更新速度也是参差不齐，有的一直在维护，有的已经很长时间不变化，太乱了。光一个MySQL的模块就好多好多好多个。怎么说呢，感觉模块什么的都不太需要太在意，重要的是理解Node的一些本质，虽然我现在还不清楚有些什么很重要的本质，总之慢慢来吧。</p>\n</blockquote>\n<blockquote>\n<p>反观python，虽然我只是也业余的python玩家，但是我也看出来了，python的很多套路都比较稳定，做起来的话踩的坑比较少，对于想我这种渴望从代码中找到成就感的屌丝来说还是很不错的。所以歇了两天之后能开始玩python</p>\n</blockquote>\n<p>之前尝试用python来做一个网站，网站干嘛的我自己也不清楚，只想借机多了解一点后端的技术。然后我决定利用知乎日报的数据来给自己做一个“纸糊日报”。其他的什么就先不说了，之前做的时候，没有掌握Evernote的使用技巧，也就没有想着做笔记。不过现在不一样了，我有特殊的做笔记技巧。</p>\n<h2>问题来了：在本地开发，保存图片的尴尬</h2>\n<p>原本只是利用webpy自带的小小服务器在本地开发，但是遇到一个问题就是，抓到图片原始路径之后，没办法直接在页面上使用，因为没有权限在知乎以外的站点使用。然后我也不知道怎么解决这种问题啊，当时为了能早点看到效果，写了一个脚本把图片保存到一个指定的路径，再从这个地方引用。</p>\n<p>那么问题来了，每过一天，打开电脑之后，我都要单独地手动地执行一次脚本，我很蛋疼！！更重要的是，如果我放到线上之后，还要把所有的图片都传上去嘛！！</p>\n<h2>转机：本地和SAE线上同步开发</h2>\n<p>然后我也没有什么好办法，就荒废下去了。昨天呢，突然意识到，发布到线上我也只有放在SAE啊，毕竟穷屌丝……。SAE支持Python开发，可以使用webpy这一小巧的框架；提供MySQL和Storage服务，Stroage最少都有10G的容量，这应该够了吧。\r\n所以安排如下：</p>\n<ul>\n<li>将本地的代码，转移到SAE上</li>\n<li>将图片保存到Stroage中而不是代码目录里</li>\n<li>日后可能使用MySQL服务</li>\n</ul>\n<h3>构建SAE中webpy的本地开发</h3>\n<p>webpy在本地运行和在SAE中运行有点不同，</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 本地</span>\r\napp <span class=\"token operator\">=</span> web<span class=\"token punctuation\">.</span>application<span class=\"token punctuation\">(</span>urls<span class=\"token punctuation\">,</span> <span class=\"token builtin\">globals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\r\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n\r\n\r\n<span class=\"token comment\"># SAE</span>\r\napp <span class=\"token operator\">=</span> web<span class=\"token punctuation\">.</span>application<span class=\"token punctuation\">(</span>urls<span class=\"token punctuation\">,</span> <span class=\"token builtin\">globals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>wsgifunc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\napplication <span class=\"token operator\">=</span> sae<span class=\"token punctuation\">.</span>create_wsgi_app<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span></code></pre></div>\n<p>将两者合并，我们得到一个既可以直接在本地运行，又可以直接在SAE运行的代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">app <span class=\"token operator\">=</span> web<span class=\"token punctuation\">.</span>application<span class=\"token punctuation\">(</span>urls<span class=\"token punctuation\">,</span> <span class=\"token builtin\">globals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\r\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token keyword\">import</span> sae\r\n    application <span class=\"token operator\">=</span> sae<span class=\"token punctuation\">.</span>create_wsgi_app<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>wsgifunc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n</code></pre></div>\n<p>SAE上的Python应用的入口为 <code class=\"language-text\">index.wsgi:application</code> ，也就是 <code class=\"language-text\">index.wsgi</code> 这个文件中名为 <code class=\"language-text\">application</code> 的对象。</p>\n<p>在本地，我可以运用<code class=\"language-text\">code.py</code>，但是在SAE上的入口是<code class=\"language-text\">index.wsgi</code>。在<a href=\"http://www.liaoxuefeng.com/article/00137389260145256f699d538ae4fd3910be06d2753b192000\">这篇博客</a>上看到了解决方案，菜鸟表示，不太明白怎么回事，我还是先乖乖拷贝吧。</p>\n<h3>将图片存至Storage</h3>\n<p>图片的抓取就不多说了。假设已经拿到了图片的地址<code class=\"language-text\">http://pic4.zhimg.com/e80a34cf13d590dea72ad5e1dfb66bac.jpg</code>。</p>\n<p>SAE提供了Storage的使用帮助文档，<a href=\"http://sae.sina.com.cn/doc/python/storage.html#module-sae.storage\">这里是Python的文档</a>，简单明了。</p>\n<p>所以我的代码是酱紫的：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">saveimagetostorage</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token comment\"># 去掉 ‘http://’</span>\r\n    file_path <span class=\"token operator\">=</span> url<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\r\n    <span class=\"token comment\"># 文件夹</span>\r\n    dir_path <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>match<span class=\"token punctuation\">(</span><span class=\"token string\">r'/\\w+(\\.\\w+){0,}\\/'</span><span class=\"token punctuation\">,</span> file_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token comment\"># 获取文件名</span>\r\n    file_name <span class=\"token operator\">=</span> file_path<span class=\"token punctuation\">[</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>dir_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\r\n\r\n    <span class=\"token keyword\">if</span> <span class=\"token string\">'SERVER_SOFTWARE'</span> <span class=\"token keyword\">in</span> os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">:</span>\r\n        <span class=\"token comment\"># import sae</span>\r\n        <span class=\"token keyword\">from</span> sae<span class=\"token punctuation\">.</span>storage <span class=\"token keyword\">import</span> Bucket\r\n        bucket <span class=\"token operator\">=</span> Bucket<span class=\"token punctuation\">(</span><span class=\"token string\">\"zhihudaily\"</span><span class=\"token punctuation\">)</span>\r\n        <span class=\"token comment\"># 存取一个文件到bucket中</span>\r\n        fr <span class=\"token operator\">=</span> urllib<span class=\"token punctuation\">.</span>urlopen<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\r\n        stream <span class=\"token operator\">=</span> fr<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n        bucket<span class=\"token punctuation\">.</span>put_object<span class=\"token punctuation\">(</span>dir_path<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>file_name<span class=\"token punctuation\">,</span> stream<span class=\"token punctuation\">)</span>\r\n        <span class=\"token keyword\">return</span> bucket\r\n\r\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\r\n        mkdir<span class=\"token punctuation\">(</span>save_path<span class=\"token punctuation\">)</span>\r\n        <span class=\"token keyword\">print</span> file_path\r\n        <span class=\"token keyword\">print</span> <span class=\"token string\">'>>>>'</span>\r\n        <span class=\"token keyword\">print</span> url\r\n        urllib<span class=\"token punctuation\">.</span>urlretrieve<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> imagePath <span class=\"token operator\">+</span> file_path<span class=\"token punctuation\">)</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"LocalHost\"</span></code></pre></div>\n<p>核心代码就是这些：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> sae<span class=\"token punctuation\">.</span>storage <span class=\"token keyword\">import</span> Bucket\r\nbucket <span class=\"token operator\">=</span> Bucket<span class=\"token punctuation\">(</span><span class=\"token string\">\"storage的名字\"</span><span class=\"token punctuation\">)</span>\r\nfr <span class=\"token operator\">=</span> urllib<span class=\"token punctuation\">.</span>urlopen<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\r\nstream <span class=\"token operator\">=</span> fr<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\nbucket<span class=\"token punctuation\">.</span>put_object<span class=\"token punctuation\">(</span>dir_path<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>file_name<span class=\"token punctuation\">,</span> stream<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>如何定时？</h3>\n<p>SAE提供了<a href=\"http://zh.wikipedia.org/wiki/Cron\">Cron(wiki)</a>服务，SAE的相关文档在<a href=\"http://sae.sina.com.cn/doc/php/cron.html\">这里</a>。这个Cron就是用来设置周期性被执行的指令的。之前每次都是手动的执行脚本来保存图片，麻烦的要死，既然已经可以图片存到SAE上了，何不再利用SAE提供的便利服务来定时执行保存的操作呢？</p>\n<blockquote>\n<p>Cron服务是SAE为开发者提供的分布式计划任务服务，用来定时触发开发者的特定动作，满足比如定时计算排行榜等需求。</p>\n</blockquote>\n<blockquote>\n<p>Cron的执行是以HTTP方式触发的，触发后真正执行的是用户在应用的HTTP的回调函数。Cron服务是分布式环境部署的，具有高可靠性，多点之间相互隔离且同时触发，并且通过分布式锁进行选举并最终由一个健康节点执行。</p>\n</blockquote>\n<p>Cron的应用场景主要是让用户可以在指定的时间执行一些计划任务。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">* 每隔一定时间执行，如每隔2个小时执行1次。\r\n* 在某个特定时间点执行，如每周二晚上9:10执行。</code></pre></div>\n<p>我可以在应用的配置文件 <code class=\"language-text\">config.yaml</code> 中来添加Cron。例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">name: crontest\r\nversion: 1\r\ncron:\r\n- description: cron_test\r\n  url: /cron/make\r\n  schedule: \"*/5 * * * *\"</code></pre></div>\n<p>添加了一个Cron任务， 该任务每5分钟执行 <a href=\"http://crontest.sinaapp.com/cron/make\">http://crontest.sinaapp.com/cron/make</a> 一次。具体如何配置可以文档给出的<a href=\"http://sae.sina.com.cn/doc/php/cron.html#id3\">例子</a></p>\n<p>在我的代码中，我设置的是每一个小时抓取一次图片，所以是酱紫的：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">name: daily\r\nversion: 1\r\ncron:\r\n- description: daily\r\n  url: /api/save_image\r\n  schedule: \"0 */1 * * *\"</code></pre></div>\n<p><strong>注意:Cron使用HTTP GET方式请求URL</strong></p>","frontmatter":{"title":"定时将图片保存在SAE的Storage中","date":"November 10, 2014","description":null,"categories":["Python"],"tags":["webpy","Python"]}},"previous":{"fields":{"slug":"/blogs/规范之路-行高的工作原理/"},"frontmatter":{"title":"规范之路-line-height的工作原理"}},"next":{"fields":{"slug":"/blogs/Node学习笔记-Wrangling the File System/"},"frontmatter":{"title":"Node学习笔记-Wrangling the File System","draft":null,"tags":["笔记","Node.js"],"categories":["Node.js"],"status":"publish"}}},"pageContext":{"id":"ff497475-4873-596d-9757-115fb47a05da","previousPostId":"dd6e394e-c9ca-5421-9b4c-679196e7e5ad","nextPostId":"bf2ae161-f80a-5041-abe0-f22c8bc6e8cd"}},
    "staticQueryHashes": ["2841359383"]}