{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/blogs/2020-11-28-如何在项目中接入single-spa/",
    "result": {"data":{"site":{"siteMetadata":{"title":"张小伦的网络日志","description":"欢迎来到张小伦的网络日志 \n\t\t一个记录生活，分享心得的博客","menu":[{"id":"home","name":"首页","url":"/"},{"id":"category","name":"分类","url":"/categories"},{"id":"archive","name":"归档","url":"/archives"},{"id":"about","name":"关于我","url":"/about"}]}},"markdownRemark":{"id":"ac0f57ce-635f-57c2-b604-893a23636a3c","html":"<p>之前的文章<a href=\"../single-spa%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-registerapplication%E5%92%8Cstart\">single-spa源码解析-registerApplication和start</a>中，对single-spa提供的两个关键方法的源码进行了简单分析。今天来讲一讲如何在项目中接入使用。</p>\n<p>要创建一个single-spa应用程序，需要做三件事：</p>\n<h2>创建一个 html 文件</h2>\n<p>这个文件的目的就是加载single-spa的 config 配置，调用 <code class=\"language-text\">registerApplication()</code> 方法。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>single-spa-config.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2>创建一个single-spa-config。</h2>\n<p>只有先注册应用，single—spa才能知道在什么时机，如何初始化、下载、挂载和卸载对应的应用。通常会在配置文件中将应用注册。通过调用<code class=\"language-text\">registerApplication</code>方法来注册应用。例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// single-spa-config.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> registerApplication<span class=\"token punctuation\">,</span> start <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'single-spa'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Simple usage</span>\n<span class=\"token function\">registerApplication</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'app2'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src/app2/main.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">location</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> location<span class=\"token punctuation\">.</span>pathname<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/app2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> some<span class=\"token operator\">:</span> <span class=\"token string\">'value'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Config with more expressive API</span>\n<span class=\"token function\">registerApplication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'app1'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">app</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src/app1/main.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  activeWhen<span class=\"token operator\">:</span> <span class=\"token string\">'/app1'</span><span class=\"token punctuation\">,</span>\n  customProps<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    some<span class=\"token operator\">:</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>参数</h3>\n<h4>name</h4>\n<p><code class=\"language-text\">registerApplication</code>的第一个参数表示应用名称，<code class=\"language-text\">name</code>必须是string类型</p>\n<h4>Loading Function or Application</h4>\n<p><code class=\"language-text\">registerApplication</code>可以是一个Promise类型的 <a href=\"configuration#loading-function\">加载函数</a>，也可以是一个已经被解析的应用。</p>\n<h5>Application as second argument</h5>\n<p>你可以选择将一个已经被解析过的应用作为<code class=\"language-text\">registerApplication</code>的第二个参数，这个应用其实是一个包含各个生命周期函数的对象。我们既可以从另外一个文件中引入该对象，也可以在single-spa的配置文件中定义这个对象。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> application <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">bootstrap</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//bootstrap function</span>\n  <span class=\"token function-variable function\">mount</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//mount function</span>\n  <span class=\"token function-variable function\">unmount</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//unmount function</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">registerApplication</span><span class=\"token punctuation\">(</span><span class=\"token string\">'applicationName'</span><span class=\"token punctuation\">,</span> application<span class=\"token punctuation\">,</span> activityFunction<span class=\"token punctuation\">)</span></code></pre></div>\n<h5>加载函数</h5>\n<p><code class=\"language-text\">registerApplication</code>的第二个参数必须是返回promise的函数(或<a href=\"https://ponyfoo.com/articles/understanding-javascript-async-await\">“async function”</a>方法)。这个函数没有入参，会在应用第一次被下载时调用。返回的Promise resolve之后的结果必须是一个可以被解析的应用。常见的实现方法是使用import加载：<code class=\"language-text\">() => import('/path/to/application.js')</code></p>\n<h4>激活函数</h4>\n<p><code class=\"language-text\">registerApplication</code>的第三个参数需要是一个纯函数，<code class=\"language-text\">window.location</code>会作为第一个参数被调用，当函数返回的值为真(truthy)值时，应用会被激活。通常情况下，Activity function会根据<code class=\"language-text\">window.location</code>/后面的path来决定该应用是否需要被激活。\n另外一种场景是single-spa根据顶级路由查找应用，而每个应用会处理自身的子路由。 在以下场景，single-spa会调用应用的activity function</p>\n<p>在以下情况下，single-spa将调用每个应用的活动函数：</p>\n<ul>\n<li><code class=\"language-text\">hashchange</code> or <code class=\"language-text\">popstate</code>事件触发时</li>\n<li><code class=\"language-text\">pushState</code> or <code class=\"language-text\">replaceState</code>被调用时</li>\n<li>在single-spa上手动调用[<code class=\"language-text\">triggerAppChange</code>] 方法</li>\n<li><code class=\"language-text\">checkActivityFunctions</code>方法被调用时</li>\n</ul>\n<h4>自定义属性</h4>\n<p><code class=\"language-text\">registerApplication</code>函数可选的第四个参数是 <a href=\"/docs/building-applications/#custom-props\">custom props</a>。这个参数会传递给 single-spa 的 <code class=\"language-text\">lifecycle</code> 函数。自定义属性可以是一个对象，也可以是一个返回Object的函数。如果自定属性是一个函数，函数的参数是应用的名字（application name)和当前<code class=\"language-text\">window.location</code>。</p>\n<h3>使用对象参数</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">singleSpa<span class=\"token punctuation\">.</span><span class=\"token function\">registerApplication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'myApp'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">app</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src/myApp/main.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  activeWhen<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'/myApp'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">location</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> location<span class=\"token punctuation\">.</span>pathname<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/some/other/path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  customProps<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    some<span class=\"token operator\">:</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsingleSpa<span class=\"token punctuation\">.</span><span class=\"token function\">registerApplication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'myApp'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">app</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src/myApp/main.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  activeWhen<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'/myApp'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">location</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> location<span class=\"token punctuation\">.</span>pathname<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/some/other/path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">customProps</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> location</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    some<span class=\"token operator\">:</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>config.name</h4>\n<p>必须是字符串。</p>\n<h4>config.app</h4>\n<p>应用的定义，它可以是一个单spa生命周期的对象，加载函数或者与第二个参数相同。</p>\n<h4>config.activeWhen</h4>\n<p>可以是激活函数，比如参数API、路径前缀或两者的数组。因为最常见的用例是使用<code class=\"language-text\">window.location</code> 将其URL前缀进行匹配，所以我们帮你实现了这个方法。</p>\n<h4>Path prefix</h4>\n<p>路径前缀会匹配url，允许以下每一种前缀：</p>\n<dl>\n  <dt>'/app1'</dt>\n  <dd>✅ https://app.com/app1</dd>\n  <dd>✅ https://app.com/app1/anything/everything</dd>\n  <dd>🚫 https://app.com/app2</dd>\n  <dt>'/users/:userId/profile'</dt>\n  <dd>✅ https://app.com/users/123/profile</dd>\n  <dd>✅ https://app.com/users/123/profile/sub-profile/</dd>\n  <dd>🚫 https://app.com/users//profile/sub-profile/</dd>\n  <dd>🚫 https://app.com/users/profile/sub-profile/</dd>\n  <dt>'/pathname/#/hash'</dt>\n  <dd>✅ https://app.com/pathname/#/hash</dd>\n  <dd>✅ https://app.com/pathname/#/hash/route/nested</dd>\n  <dd>🚫 https://app.com/pathname#/hash/route/nested</dd>\n  <dd>🚫 https://app.com/pathname#/another-hash</dd>\n  <dt>['/pathname/#/hash', '/app1']</dt>\n  <dd>✅ https://app.com/pathname/#/hash/route/nested</dd>\n  <dd>✅ https://app.com/app1/anything/everything</dd>\n  <dd>🚫 https://app.com/pathname/app1</dd>\n  <dd>🚫 https://app.com/app2</dd>\n</dl>\n<h4>自定义属性</h4>\n<p><code class=\"language-text\">registerApplication</code>函数可选的第四个参数是 <a href=\"/docs/building-applications/#custom-props\">custom props</a>。这个参数会传递给 single-spa 的 <code class=\"language-text\">lifecycle</code> 函数。自定义属性可以是一个对象，也可以是一个返回Object的函数。如果自定属性是一个函数，函数的参数是应用的名字（application name)和当前<code class=\"language-text\">window.location</code></p>\n<h2>调用 singleSpa.start()</h2>\n<p><a href=\"api.md#start\"><code class=\"language-text\">start()方法</code></a> <strong>必须</strong>被single-spa配置文件的js调用，这时应用才会被真正挂载。在<code class=\"language-text\">start</code>被调用之前，应用先被下载，但不会初始化/挂载/卸载。<code class=\"language-text\">start</code>方法可以协助我们更好提升应用的性能。举个例子，我们可能会马上注册一个应用(为了立刻下载代码)，但不能马上就在DOM节点上挂载该应用，而是需要等一个AJAX请求(可能会获取用户的登录信息)完成后，再根据结果进行挂载。这种情况下，最佳实践是先调用<code class=\"language-text\">registerApplication</code>，等AJAX请求完成后再调用<code class=\"language-text\">start</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//single-spa-config.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> start <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'single-spa'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*在注册应用之前调用start意味着single-spa可以立即安装应用，无需等待单页应用的任何初始设置。*/</span>\n<span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 注册应用。。。。</span></code></pre></div>\n<h2>创建一个应用程序。</h2>\n<p>single-spa 应用与普通的单页面是一样的，只不过它没有HTML页面。在一个single-spa中，可以包含许多被注册的应用，而各个应用可以使用不同的框架。被注册的这些应用维护自己的客户端路由，使用自己需要的框架或者类库。应用只要通过挂载，便可渲染自己的html页面，并自由实现功能。“挂载”(mounted)的概念指的是被注册的应用内容是否已展示在DOM上。我们可通过应用的<a href=\"#%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0\">activity function</a>来判断其是否已被挂载。应用在未挂载之前，会一直保持休眠状态。</p>\n<p>在一个 single-spa 页面，注册的应用会经过下载(loaded)、初始化(initialized)、被挂载(mounted)、卸载(unmounted)和unloaded（被移除）等过程。single-spa会通过“生命周期”为这些过程提供钩子函数。\n生命周期函数是 single-spa 在注册的应用上调用的一系列函数，single-spa 会在各应用的主文件中，查找对应的函数名并进行调用。所以注册的应用必须保证在其入口文件实现下面提到的各个生命周期函数。</p>\n<ul>\n<li><code class=\"language-text\">bootstrap</code>, <code class=\"language-text\">mount</code>, and <code class=\"language-text\">unmount</code>的实现是必须的，<code class=\"language-text\">unload</code>则是可选的</li>\n<li>生命周期函数必须有返回值，可以是Promise或者<code class=\"language-text\">async</code>函数</li>\n<li>如果导出的是函数数组而不是单个函数，这些函数会被依次调用，对于promise函数，会等到resolve之后再调用下一个函数</li>\n<li>如果 single-spa <a href=\"api.md#start\">未启动</a>，各个应用会被下载，但不会被初始化、挂载或卸载。</li>\n</ul>\n<blockquote>\n<p><strong>注</strong></p>\n<p>在<a href=\"ecosystem.md\">single-spa 生态</a>中有各个主流框架对于生命周期函数的实现，这些文档有助于理解这些helper执行的操作，也有助于你自己实现生命周期函数。</p>\n</blockquote>\n<h3>生命周期参数</h3>\n<p>生命周期函数使用”props” 传参，这个对象包含single-spa相关信息和其他的自定义属性。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">bootstrap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">,</span>        <span class=\"token comment\">// 应用名称</span>\n    singleSpa<span class=\"token punctuation\">,</span>   <span class=\"token comment\">// singleSpa实例</span>\n    mountParcel<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 手动挂载的函数</span>\n    customProps  <span class=\"token comment\">// 自定义属性</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// Props 会传给每个生命周期函数</span>\n  <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>内置参数</h4>\n<p>每个生命周期函数的入参都会保证有如下参数：</p>\n<ul>\n<li><code class=\"language-text\">name</code>: 注册到 single-spa 的应用名称</li>\n<li><code class=\"language-text\">singleSpa</code>: 对singleSpa 实例的引用, 方便各应用和类库调用singleSpa提供的API时不再导入它。 可以解决有多个webpack配置文件构建时无法保证只引用一个singleSpa实例的问题。</li>\n<li><code class=\"language-text\">mountParcel</code>: <a href=\"/docs/parcels-api.html#mountparcel\">mountParcel 函数</a>.</li>\n</ul>\n<h4>自定义参数</h4>\n<p>除single-spa提供的内置参数外，还可以指定自定义参数，在调用各个生命周期函数时传入。指定方法是在调用<code class=\"language-text\">registerApplication</code>时，传入第4个参数。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// root.application.js</span>\nsingleSpa<span class=\"token punctuation\">.</span><span class=\"token function\">registerApplication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'app1'</span><span class=\"token punctuation\">,</span>\n  activeWhen<span class=\"token punctuation\">,</span>\n  app<span class=\"token punctuation\">,</span>\n  customProps<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> authToken<span class=\"token operator\">:</span> <span class=\"token string\">\"d83jD63UdZ6RS6f70D0\"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsingleSpa<span class=\"token punctuation\">.</span><span class=\"token function\">registerApplication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'app1'</span><span class=\"token punctuation\">,</span>\n  activeWhen<span class=\"token punctuation\">,</span>\n  app<span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">customProps</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> location</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> authToken<span class=\"token operator\">:</span> <span class=\"token string\">\"d83jD63UdZ6RS6f70D0\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// app1.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>authToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 可以在 app1 中获取到authToken参数</span>\n  <span class=\"token keyword\">return</span> reactLifecycles<span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可能使用到的场景：</p>\n<ul>\n<li>各个应用共享一个公共的 access token</li>\n<li>下发初始化信息，如渲染目标</li>\n<li>传递对事件总线（event bus）的引用，方便各应用之间进行通信</li>\n</ul>\n<p>注意如果没有提供自定义参数，则<code class=\"language-text\">props.customProps</code>默认会返回一个空对象。</p>\n<h3>下载(load)</h3>\n<p>注册的应用会被懒加载，这指的是该应用的代码会从服务器端下载并执行。注册的应用在<a href=\"#%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0\">activity function</a> 第一次返回真值(truthy value)时，下载动作会发生。在下载过程中，建议尽可能执行少的操作，可以在<code class=\"language-text\">bootstrap</code>生命周期之后再执行各项操作。若确实有在下载时需要执行的操作，可将代码放入子应用入口文件中，但要放在各导出函数的外部。例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The registered application has been loaded!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">bootstrap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">unmount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h3>初始化</h3>\n<p>这个生命周期函数会在应用<strong>第一次</strong>挂载前<strong>执行一次</strong>。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">bootstrap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Promise\n    <span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// One-time initialization code goes here</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bootstrapped!'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>挂载</h3>\n<p>每当应用的<a href=\"#%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0\">activity function</a>返回真值，但该应用处于未挂载状态时，挂载的生命周期函数就会被调用。调用时，函数会根据URL来确定当前被激活的路由，创建DOM元素、监听DOM事件等以向用户呈现渲染的内容。任何子路由的改变（如<code class=\"language-text\">hashchange</code>或<code class=\"language-text\">popstate</code>等）不会再次触发<code class=\"language-text\">mount</code>，需要各应用自行处理。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Promise\n    <span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Do framework UI rendering here</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mounted!'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>卸载</h3>\n<p>每当应用的<a href=\"#%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0\">activity function</a>返回假值，但该应用已挂载时，卸载的生命周期函数就会被调用。卸载函数被调用时，会清理在挂载应用时被创建的DOM元素、事件监听、内存、全局变量和消息订阅等。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">unmount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Promise\n    <span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Do framework UI unrendering here</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'unmounted!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>移除</h3>\n<p>“移除”生命周期函数的实现是可选的，它只有在<a href=\"api.md#unloadapplication\">unloadApplication</a>被调用时才会触发。如果一个已注册的应用没有实现这个生命周期函数，则假设这个应用无需被移除。\n移除的目的是各应用在移除之前执行部分逻辑，一旦应用被移除，它的状态将会变成NOT_LOADED，下次激活时会被重新初始化。\n移除函数的设计动机是对所有注册的应用实现“热下载”，不过在其他场景中也非常有用，比如想要重新初始化一个应用，且在重新初始化之前执行一些逻辑操作时。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">unload</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Promise\n    <span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Hot-reloading implementation goes here</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'unloaded!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>超时</h3>\n<p>默认情况下，所有注册的应用遵循<a href=\"/docs/api#setbootstrapmaxtime\">全局超时配置</a>，但对于每个应用，也可以通过在主入口文件导出一个<code class=\"language-text\">timeouts</code>对象来重新定义超时时间。如：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// app-1.main-entry.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">bootstrap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">unmount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> timeouts <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  bootstrap<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    millis<span class=\"token operator\">:</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">,</span>\n    dieOnTimeout<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    warningMillis<span class=\"token operator\">:</span> <span class=\"token number\">2500</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  mount<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    millis<span class=\"token operator\">:</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">,</span>\n    dieOnTimeout<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    warningMillis<span class=\"token operator\">:</span> <span class=\"token number\">2500</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  unmount<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    millis<span class=\"token operator\">:</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">,</span>\n    dieOnTimeout<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    warningMillis<span class=\"token operator\">:</span> <span class=\"token number\">2500</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  unload<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    millis<span class=\"token operator\">:</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">,</span>\n    dieOnTimeout<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    warningMillis<span class=\"token operator\">:</span> <span class=\"token number\">2500</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>注意<code class=\"language-text\">millis</code>指的是最终控制台输出警告的毫秒数，<code class=\"language-text\">warningMillis</code>指的是将警告打印到控制台(间隔)的毫秒数。</p>\n</blockquote>\n<h2>使用single-spa生态快速接入</h2>\n<p>single-spa官方团队针对不同流行框架创建了一些项目，帮助开发者使用自己选择的框架来创建single-spa应用。这里以React为例。</p>\n<p>官方提供了<a href=\"https://github.com/single-spa/single-spa-react\">single-spa-react</a>，为React应用提供了生命周期钩子。</p>\n<p>来看一下案例，singleSpaReact最后返回的包含各生命周期函数的对象：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> rootComponent <span class=\"token keyword\">from</span> <span class=\"token string\">'./path-to-root-component.js'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Note that SingleSpaContext is a react@16.3 (if available) context that provides the singleSpa props</span>\n<span class=\"token keyword\">import</span> singleSpaReact<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>SingleSpaContext<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'single-spa-react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> reactLifecycles <span class=\"token operator\">=</span> <span class=\"token function\">singleSpaReact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  React<span class=\"token punctuation\">,</span>\n  ReactDOM<span class=\"token punctuation\">,</span>\n  rootComponent<span class=\"token punctuation\">,</span>\n  <span class=\"token function\">errorBoundary</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">,</span> props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// https://reactjs.org/docs/error-boundaries.html</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>This renders when a catastrophic error occurs<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> bootstrap <span class=\"token operator\">=</span> reactLifecycles<span class=\"token punctuation\">.</span>bootstrap<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> mount <span class=\"token operator\">=</span> reactLifecycles<span class=\"token punctuation\">.</span>mount<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> unmount <span class=\"token operator\">=</span> reactLifecycles<span class=\"token punctuation\">.</span>unmount<span class=\"token punctuation\">;</span></code></pre></div>\n<p>single-spa-react的源码不难，主要包括参数处理，和针对React框架的一些特点和语法实现了DOM的创建和插入，这里就不做过多分析，有兴趣的朋友可以自行阅读。</p>\n<h2>参考</h2>\n<ol>\n<li><a href=\"https://single-spa.js.org/docs/building-applications\">single-spa building-applications</a></li>\n<li><a href=\"https://single-spa.js.org/docs/configuration\">COnfiguring single-spa</a></li>\n</ol>","frontmatter":{"title":"如何在项目中接入single-spa","date":"November 28, 2020","description":null,"categories":["技术研究"],"tags":[]}},"previous":{"fields":{"slug":"/blogs/2020-12-14-随机的联想/"},"frontmatter":{"title":"关于JavaScript的随机数"}},"next":{"fields":{"slug":"/blogs/2020-11-21-single-spa源码解析-registerApplication和start/"},"frontmatter":{"title":"single-spa源码解析-registerApplication和start","draft":false,"tags":[],"categories":[],"status":"publish"}}},"pageContext":{"id":"ac0f57ce-635f-57c2-b604-893a23636a3c","previousPostId":"3b5e5306-319c-5088-aa2b-f2c4c6794b62","nextPostId":"f6215d5d-64b3-53f8-a5d1-80290b31125a"}},
    "staticQueryHashes": ["2841359383"]}