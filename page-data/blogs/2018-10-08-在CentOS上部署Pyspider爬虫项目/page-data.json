{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/blogs/2018-10-08-在CentOS上部署Pyspider爬虫项目/",
    "result": {"data":{"site":{"siteMetadata":{"title":"张小伦的网络日志","description":"欢迎来到张小伦的网络日志 \n\t\t一个记录生活，分享心得的博客","menu":[{"id":"home","name":"首页","url":"/"},{"id":"category","name":"分类","url":"/categories"},{"id":"archive","name":"归档","url":"/archives"},{"id":"about","name":"关于我","url":"/about"}]}},"markdownRemark":{"id":"299b7724-70ec-5fd6-8938-26d6bf535bf8","html":"<h2>前言</h2>\n<p>之前在腾讯云的云主机中，部署了一个pyspider爬虫项目，专门爬链家上的二手房信息。前段时间云主机被我玩坏了，重装了一次，需要重新在部署一次。之前没有记录下具体的过程，无奈只能搜索资料重来一次。乘着这次机会，在此记录下 CentOS 上 Pyspider 爬虫项目的部署过程。以后还是需要多做笔记，整理学习</p>\n<!--more-->\n<h2>安装 Python3</h2>\n<p>在部署pyspider项目之前，需要安装Python，虽然系统自带Python2.7.5，但是我选择使用Python3。Python3的安装过程十分简单，在我之前的文章：<a href=\"https://zhanglun.github.io/2018/03/09/%E4%B8%AA%E4%BA%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B8%B8%E7%94%A8%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/\">个人服务器常用基础配置</a> 中提到过。在这里重新记录一次</p>\n<h3>源码安装</h3>\n<p>在安装之前，有几个依赖工具需要提前装好。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ yum <span class=\"token function\">install</span> gcc zlib-devel</code></pre></div>\n<p>接下来时下载源码、编译安装。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">wget</span> https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tar.xz -O python3.7.0.tar.xz\n$ <span class=\"token function\">tar</span> xJf python3.7.0tar.xz\n$ <span class=\"token builtin class-name\">cd</span> python3.7.0tar.xz\n$ ./configure\n\n// 因为我使用的是 fish-shell。其实就是 <span class=\"token function\">bash</span> 中的 <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">make</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span><span class=\"token variable\">`</span></span>\n$ <span class=\"token function\">make</span><span class=\"token punctuation\">;</span> and  <span class=\"token function\">make</span> <span class=\"token function\">install</span>\n\n// 检查安装结果。输出 <span class=\"token variable\"><span class=\"token variable\">`</span>/usr/local/bin/python3<span class=\"token variable\">`</span></span>\n$ <span class=\"token function\">which</span> python3</code></pre></div>\n<h3>使用 pyenv 安装</h3>\n<p>有时多个python版本还是希望用pyenv隔离下，避免不同版本库间的影响干扰。有时为了避免固有bug的影响，希望从零开始安装一个纯净的环境，pyenv就可以发挥作用了。</p>\n<h4>安装依赖的库文件</h4>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">yum <span class=\"token function\">install</span> zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</code></pre></div>\n<h4>安装 pyenv</h4>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone git://github.com/yyuu/pyenv.git ~/.pyenv\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'export PYENV_ROOT=\"$HOME/.pyenv\"'</span> <span class=\"token operator\">>></span> ~/.bashrc\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'export PATH=\"$PYENV_ROOT/bin:$PATH\"'</span> <span class=\"token operator\">>></span> ~/.bashrc\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'eval \"$(pyenv init -)\"'</span> <span class=\"token operator\">>></span> ~/.bashrc\n<span class=\"token builtin class-name\">exec</span> <span class=\"token environment constant\">$SHELL</span> -l</code></pre></div>\n<h4>简单使用</h4>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\">#查看当前版本</span>\npyenv version\n\n<span class=\"token comment\"># 查看所有版本</span>\npyenv versions\n\n<span class=\"token comment\"># 查看所有可安装的版本</span>\npyenv <span class=\"token function\">install</span> --list\n\n<span class=\"token comment\"># 安装指定版本</span>\npyenv <span class=\"token function\">install</span> <span class=\"token number\">3.6</span>.5\n<span class=\"token comment\"># 安装新版本后rehash一下</span>\npyenv rehash\n\n<span class=\"token comment\"># 删除指定版本</span>\npyenv uninstall <span class=\"token number\">3.5</span>.2\n\n<span class=\"token comment\"># 指定全局版本</span>\npyenv global <span class=\"token number\">3.6</span>.5\n\n<span class=\"token comment\"># 指定多个全局版本, 3版本优先</span>\npyenv global <span class=\"token number\">3.6</span>.5 <span class=\"token number\">2.7</span>.14\n\n<span class=\"token comment\"># 实际上当你切换版本后, 相应的pip和包仓库都是会自动切换过去的</span></code></pre></div>\n<h4>使用Pyenv安装python</h4>\n<p>如果你试图通过pyenv安装python版本，不出意外的话一定会失败。解决方案很简单：</p>\n<ol>\n<li>pyenv搜狐镜像源加速：<a href=\"http://mirrors.sohu.com/python/\">http://mirrors.sohu.com/python/</a></li>\n<li>下载需要的版本放到~/.pyenv/cache文件夹下面</li>\n<li>然后执行 pyenv install 版本号 安装对应的python版本</li>\n</ol>\n<p>简化为一条命令：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">v</span><span class=\"token operator\">=</span><span class=\"token number\">3.6</span>.5<span class=\"token punctuation\">;</span><span class=\"token function\">wget</span> http://mirrors.sohu.com/python/<span class=\"token variable\">$v</span>/Python-<span class=\"token variable\">$v</span>.tar.xz -P ~/.pyenv/cache/<span class=\"token punctuation\">;</span>pyenv <span class=\"token function\">install</span> <span class=\"token variable\">$v</span>  </code></pre></div>\n<p>然后通过 <code class=\"language-text\">pyenv global 3.6.5</code> 设置当前python版本，再 <code class=\"language-text\">pyenv rehash</code> 即可。此时<code class=\"language-text\">python</code>和<code class=\"language-text\">pip</code>都是python3对应的版本</p>\n<p>通过修改pip的镜像源加速python包的下载。创建或者修改以下文件 ~/.pip/pip.conf 写入以下文件内容</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>global<span class=\"token punctuation\">]</span>\nindex-url <span class=\"token operator\">=</span> http://mirrors.aliyun.com/pypi/simple\n<span class=\"token punctuation\">[</span>install<span class=\"token punctuation\">]</span>\ntrusted-host <span class=\"token operator\">=</span> mirrors.aliyun.com</code></pre></div>\n<p>这样在使用pip来安装时，会默认调用该镜像。</p>\n<h2>安装 pyspider</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> pyspider</code></pre></div>\n<p>关于 pyspider的使用在此不在复述，网上有很多教程。个人在使用过程中，增加了一个配置文件，最终通过一下命令启动</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">nohup pyspider -c config.json&amp;</code></pre></div>","frontmatter":{"title":"在 CentOS 上部署 pyspider 爬虫项目","date":"October 08, 2018","description":null,"categories":[null],"tags":["Python"]}},"previous":{"fields":{"slug":"/blogs/2019-01-26-巧用-webpack-loader-实现项目的定制化/"},"frontmatter":{"title":"巧用 webpack loader 实现项目的定制化"}},"next":{"fields":{"slug":"/blogs/2018-07-15-TypeScript学习笔记-在Webpack中配置TypeScript/"},"frontmatter":{"title":"TypeScript学习笔记-在Webpack中配置TypeScript","draft":null,"tags":["TypeScript"],"categories":[],"status":"publish"}}},"pageContext":{"id":"299b7724-70ec-5fd6-8938-26d6bf535bf8","previousPostId":"b448a0d9-ef80-57dc-ac0f-bc89aeacf5c5","nextPostId":"158ce494-b9c9-54ee-b68c-3e333c497589"}},
    "staticQueryHashes": ["2841359383"]}