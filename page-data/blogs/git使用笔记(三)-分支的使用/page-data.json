{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/blogs/git使用笔记(三)-分支的使用/",
    "result": {"data":{"site":{"siteMetadata":{"title":"张小伦的网络日志","description":"欢迎来到张小伦的网络日志 \n\t\t一个记录生活，分享心得的博客","menu":[{"id":"home","name":"首页","url":"/"},{"id":"category","name":"分类","url":"/categories"},{"id":"archive","name":"归档","url":"/archives"},{"id":"about","name":"关于我","url":"/about"}]}},"markdownRemark":{"id":"c07f3b45-1ee4-523e-93a3-11a70fb13364","html":"<h2>简单介绍</h2>\n<p>之前说过，每次修改之后，Git 并不是保存这些修改之后的差异变化，实际上就像一个照相机一样，将修改后的文件拍下作为文件快照，记录在一个微型的文件系统中。在 Git 中提交时，会保存一个提交对象，这个对象包含一个暂存内容快照的指针。而 Git 中的分支其本质上是一个指向 commit 对象的可变的指针，使用 master 作为分支的默认名字，通常指向的是最新的一次提交。</p>\n<p>每次的提交，Git 把他们穿起来连成一条线，而主分支master就在这条线上随着提交测更新移动，而 HEAD 指向master，表示我们当前处在 master 分支上（不好意思，直接就用廖雪峰老师的图了，他的教程请戳<a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\">这里</a>）</p>\n<!--![images](http://ncuey-crispelite.stor.sinaapp.com/18333fig0304-tn.png) -->\n<p>创建一个叫做 dev 分支，这个分支默认会只想当前你所处在的提交对象上，切换到这个分支上后，HEAD 便指向了 dev。</p>\n<!--![images](http://ncuey-crispelite.stor.sinaapp.com/new-branch-dev.png) -->\n<p>从这个时候开始，对工作区的操作都只是在 dev 分支上发生了，在 dev 的上提交一次之后，master 指向原来的那个提交对象，而 dev 会指向最新的提交对象。我们称：master 落后了 dev 一个 commit。当我们试图将 master 指向 dev 当前的提交时，这个操作就是合并分支。</p>\n<p>在上述的这几个过程中，工作区的内容没有变化，整个过程就是修改几个指针而已，几乎就是瞬间完成。</p>\n<h2>创建与合并</h2>\n<p>创建一个 crisp 分支，然后切换到这个分支：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout -b crisp\r\nSwitched to a new branch <span class=\"token string\">'crisp'</span></code></pre></div>\n<p><code class=\"language-text\">git checkout -b</code> 表示创建并切换分支，相当于将下面两步操作合并成一步来做</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> branch crisp \t\t// 创建分支\r\n<span class=\"token function\">git</span> checkout crisp\t\t// 切换到指定的分支</code></pre></div>\n<p>同时，可以用 <code class=\"language-text\">git branch</code> 查看分支，这个命令会列出所有的分支，在当前的分支前面会表上一个 * 号。</p>\n<p>分支与分支之间相互独立，彼此绝缘，所以可以在 主分支master的基础上分出若干个分支，进行不同的操作，比如不同模块的开发，bug的修复等，工作完成之后合并到主分支就行了。怎么合并分支呢？</p>\n<p>假设我们正在 dev 分之上开发，当开发完成后，在这个分之上提交代码</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\r\n<span class=\"token function\">git</span> commit -m <span class=\"token string\">\"dev 开发完成！\"</span></code></pre></div>\n<p>此时的提交是在 dev 分支上的提交，当你切回 master 上是，dev 上的修改你都看不到。此时的 master 如果没有人提交过的话，则停留在切换分支之前的那个提交点上，也就是落后与 dev 分支。这个时候我们就需要将分支合并了。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout master\t\t// 先切回 master 分支 \r\n<span class=\"token function\">git</span> merge dev \t\t\t// 手动将dev 分支上的提交合并到 master 上</code></pre></div>\n<p>当某一个分支不在需要的时候，可以将它删除</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> branch -d branchname</code></pre></div>\n<p>小小的总结一下：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">查看分支：git branch\r\n\r\n创建分支：git branch name\r\n\r\n切换分支：git checkout name\r\n\r\n创建+切换分支：git checkout -b name\r\n\r\n合并某分支到当前分支：git merge name\r\n\r\n删除分支：git branch -d name</code></pre></div>","frontmatter":{"title":"Git 使用笔记(三)-分支的使用","date":"September 14, 2014","description":null,"categories":[],"tags":["Git","笔记"]}},"previous":{"fields":{"slug":"/blogs/css中的权重问题/"},"frontmatter":{"title":"CSS 中的权重问题"}},"next":{"fields":{"slug":"/blogs/规范之路-css中的定位简介/"},"frontmatter":{"title":"规范之路-CSS中的定位简介","draft":null,"tags":["CSS","笔记"],"categories":["重构"],"status":"publish"}}},"pageContext":{"id":"c07f3b45-1ee4-523e-93a3-11a70fb13364","previousPostId":"0db2258c-59a6-5f89-8eba-667140558ed1","nextPostId":"fcdf7d73-8d61-56b6-9de1-09775e2a2964"}},
    "staticQueryHashes": ["2841359383"]}