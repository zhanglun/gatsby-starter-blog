{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/blogs/2017-01-11-JavaScrip-模块系统详解/",
    "result": {"data":{"site":{"siteMetadata":{"title":"张小伦的网络日志","description":"欢迎来到张小伦的网络日志 \n\t\t一个记录生活，分享心得的博客","menu":[{"id":"home","name":"首页","url":"/"},{"id":"category","name":"分类","url":"/categories"},{"id":"archive","name":"归档","url":"/archives"},{"id":"about","name":"关于我","url":"/about"}]}},"markdownRemark":{"id":"5176bcfe-d265-559f-9d07-8dddfc44b2f2","html":"<p>在这几天的工作中，我需要调用同事编写的兼容jQuery和React的通用组件。他为了兼容jQuery风格的调用和React的组件化，分别export了一个default和几个方法函数。在调用的过程中，出现了一些小插曲：React代码和老的jQuery老代码调用时应该怎么正确的import？虽然是很低级的问题，但是引发了我一些思考：<strong>export 和 import 与 module.exports 和 exports 之间的关系</strong>以及<strong>JavaScript模块系统的发展历程</strong>。</p>\n<!--more-->\n<p>JavScript这门语言，在设计之初是没有自己的模块系统的。但是在 ES6 正式发布之前，社区已经中已经出现了一些库，实现了简单的模块风格，并且这种风格在 ES6 中也是适用的：</p>\n<ul>\n<li>每个模块都是一段代码，加载之后只会解析过程只会执行一次；</li>\n<li>在模块中可以声明变量，函数，类等；\n<ul>\n<li>默认情况下，这些声明都是这个模块的局部声明；</li>\n<li>可以将一些声明导出，让其他模块引用；</li>\n</ul>\n</li>\n<li>一个模块可以通过模块标识符或者文件路径引入其他模块；</li>\n<li>模块都是单例的，即使多次引用，也只有一个实例;</li>\n</ul>\n<p>有一点要注意，避免通过<code class=\"language-text\">global</code>作为来引用自己的模块，因为<code class=\"language-text\">global</code>本身也是一个模块。</p>\n<h3>ES5中的模块系统</h3>\n<p>前面说到的，在 ES6 之前，JavaScript 是没有模块系统这一说的。在社区的模块风格出现之前，编写 JavaScript常常会遇到这种情况：</p>\n<ul>\n<li>所有的代码写在一个文件里面，按照依赖顺序，被依赖的方法必须写在前面。 简单粗暴，但是问题很多\n<ul>\n<li>通用的代码无法重复利用。</li>\n<li>单个文件会越来越大，后期的命名也会越来越艰难。</li>\n</ul>\n</li>\n<li>按照功能将代码拆分成不同文件，按照依赖顺序加载，被依赖的方法必须先加载。通用代码可以复用，但是问题还是很多\n<ul>\n<li>过多全局变量，容易冲突。</li>\n<li>过多 JavaScript 脚本加载导致页面阻塞（虽然 HTML5中的 defer和 async可以适当的减轻这个问题）。</li>\n<li>过多依赖不方便管理和开发。</li>\n</ul>\n</li>\n</ul>\n<p>随着 JavaScript 的地位慢慢提高，为了满足日常开发的需要，社区中慢慢出现了相对比较同意的模块标准，主要有两种：</p>\n<ul>\n<li><strong>CommonJS Modules:</strong> 这个标准主要在 Node.js 中实现（Node.js的模块比 CommonJS 好稍微多一些特性）。其特点是：</li>\n</ul>\n<ul>\n<li>简单的语法</li>\n<li>为同步加载和服务端而设计</li>\n</ul>\n<ul>\n<li><strong>Asynchronous Module Definition (AMD):</strong> 这个标准最受欢迎的实现实在 RequireJS 中。其特点是：</li>\n</ul>\n<ul>\n<li>稍微复杂一点点的语法，使得AMD的运行不需要编译</li>\n<li>为异步加载和浏览器而设计</li>\n</ul>\n<p>上述只是 ES5 模块系统的简单介绍，如果有兴趣可以去看看<a href=\"https://addyosmani.com/writing-modular-js/\">Writing Modular JavaScript With AMD, CommonJS &#x26; ES Harmony</a>。</p>\n<h4>CommonJS Modules 在 Node.js 中的实现</h4>\n<p>根据CommonJS规范，一个单独的文件就是一个模块。每一个模块都是一个单独的作用域，在该模块内部定义的变量，无法被其他模块读取，除非定义为global对象的属性，或者将属性暴露出来。在 Nodejs就是如此。</p>\n<p>比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> circle <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./circle.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用 require 加载模块 circle</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">The area of a circle of radius 4 is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>circle<span class=\"token punctuation\">.</span><span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在 circle.js 中:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">PI</span> <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span><span class=\"token punctuation\">;</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">area</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> r <span class=\"token operator\">*</span> r<span class=\"token punctuation\">;</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">circumference</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> r<span class=\"token punctuation\">;</span></code></pre></div>\n<p>circle.js 模块导出了 area()和 circumffference()两个方法，变量 PI是这个模块的私有变量。如果想为自定义的模块添加属性或者方法，将它们添加到 exports 这个特殊的对象上就可以达到目的。\n如果希望模块提供的接口是一个构造函数，或者输出的是一个完整的对象而不是一个属性，那么可以使用 module.exports 代替 exports。但是注意，exports 是 module.exports 的一个引用，只是为了用起来方便，只要没有重写 module.exports对象，那么<code class=\"language-text\">module.exports.xxx</code>就等价于<code class=\"language-text\">exports.xxx</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> square <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./square.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> mySquare <span class=\"token operator\">=</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">The area of my square is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>mySquare<span class=\"token punctuation\">.</span><span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>square.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">width</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">area</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> width <span class=\"token operator\">*</span> width\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>AMD规范</h4>\n<p>AMD是“Asynchronous Module Definition”的缩写。通过异步方式加载模块，模块的加载不影响后续语句的执行，所有依赖加载中的模块的语句，都会放在一个回调函数中，等到该模块加载完成后，这个回调函数才运行。注意，在 AMD 中模块名是全局作用域，可以在全局引用。</p>\n<p>AMD规范的API非常简单：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">define<span class=\"token punctuation\">(</span>id?, dependencies?, factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>规范定义了一个define函数，它用来定义一个模块。它包含三个参数，前两个参数都是可选的。</p>\n<ul>\n<li>id：是一个string字符串，它表示模块的标识。通常用来定义这个模块的名字，一般不用</li>\n<li>dependencies：是一个数组，依赖的模块的标识。也是可选的参数，每个依赖的模块的输出将作为参数一次传入 factory 中。如果没有指定 dependencies，那么它的默认值是 [“require”, “exports”, “module”]。</li>\n<li>factory：一个函数或者对象。如果是函数，在依赖的模块加载成功后，会执行这个回调函数，它的返回值就是模块的输出接口或值。它的参数是所有依赖模块的引用。</li>\n</ul>\n<p>定义一个名为 myModule 的模块，它依赖 jQuery 模块：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myModule'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'jquery'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">$</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// $ 是 jquery 模块的输出</span>\n    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'body'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 使用</span>\n<span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'myModule'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">myModule</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>ES6中的模块系统</h3>\n<p>ES6 模块系统的目标就是创建一个统一的模块格式，让 CommonJS 和 AMD的使用者都满意：</p>\n<ul>\n<li>和CommonJS类似，但是更加简洁的语法，循环引用的支持更好。</li>\n<li>和AMD类似，直接支持异步加载和可配置的模块加载。</li>\n</ul>\n<p>模块标准主要有两部分：</p>\n<ol>\n<li>声明语法：import 和 export</li>\n<li>可编程的加载 API：配置模块如何以及有条件地加载模块</li>\n</ol>\n<h4>ES6模块的基础</h4>\n<p>在 ES6的模块系统中，有两种 export：命名的 export 和默认的 export。在一个文件中，命名的 export 可以有多个，而默认的 default export 只能有一个。可以同时使用，但最好还是分开使用。</p>\n<h5>命名的export</h5>\n<p>也可以在声明表达式前面加上 export 关键字可以直接导出将声明的对象导出：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//------ lib.js ------</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> sqrt <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">diag</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token function\">square</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//------ main.js ------</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> square<span class=\"token punctuation\">,</span> diag <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'lib'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 121</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">diag</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span></code></pre></div>\n<p>如果要导出一个已经存在的变量，需要加上<code class=\"language-text\">{}</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> random <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> random<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// SyntaxError: Unexpected token, expected {</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> random <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>使用 CommonJS 语法实现相同目的：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//------ lib.js ------</span>\n<span class=\"token keyword\">var</span> sqrt <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">diag</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token function\">square</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    sqrt<span class=\"token operator\">:</span> sqrt<span class=\"token punctuation\">,</span>\n    square<span class=\"token operator\">:</span> square<span class=\"token punctuation\">,</span>\n    diag<span class=\"token operator\">:</span> diag<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//------ main.js ------</span>\n<span class=\"token keyword\">var</span> square <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'lib'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>square<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> diag <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'lib'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>diag<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 121</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">diag</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span></code></pre></div>\n<p>下面是来自 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export\">MDN</a> 的更加完整的export 语法：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> name1<span class=\"token punctuation\">,</span> name2<span class=\"token punctuation\">,</span> …<span class=\"token punctuation\">,</span> nameN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> variable1 <span class=\"token keyword\">as</span> name1<span class=\"token punctuation\">,</span> variable2 <span class=\"token keyword\">as</span> name2<span class=\"token punctuation\">,</span> …<span class=\"token punctuation\">,</span> nameN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">let</span> name1<span class=\"token punctuation\">,</span> name2<span class=\"token punctuation\">,</span> …<span class=\"token punctuation\">,</span> nameN<span class=\"token punctuation\">;</span> <span class=\"token comment\">// also var</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">let</span> name1 <span class=\"token operator\">=</span> …<span class=\"token punctuation\">,</span> name2 <span class=\"token operator\">=</span> …<span class=\"token punctuation\">,</span> …<span class=\"token punctuation\">,</span> nameN<span class=\"token punctuation\">;</span> <span class=\"token comment\">// also var, const</span>\n\n<span class=\"token keyword\">export</span> expression<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> expression<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">…</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> … <span class=\"token punctuation\">}</span> <span class=\"token comment\">// also class, function*</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">name1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">…</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> … <span class=\"token punctuation\">}</span> <span class=\"token comment\">// also class, function*</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> name1 <span class=\"token keyword\">as</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">,</span> … <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token operator\">*</span> from …<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> name1<span class=\"token punctuation\">,</span> name2<span class=\"token punctuation\">,</span> …<span class=\"token punctuation\">,</span> nameN <span class=\"token punctuation\">}</span> from …<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> import1 <span class=\"token keyword\">as</span> name1<span class=\"token punctuation\">,</span> import2 <span class=\"token keyword\">as</span> name2<span class=\"token punctuation\">,</span> …<span class=\"token punctuation\">,</span> nameN <span class=\"token punctuation\">}</span> from …<span class=\"token punctuation\">;</span></code></pre></div>\n<h5>默认导出</h5>\n<p>每个模块只有一个默认导出的值， default export 可以是一个函数，一个类，一个对象或者其他任意值。有两种形式的 default export:</p>\n<ol>\n<li>被标记的声明。导出一个函数或者类</li>\n<li>直接导出值。导出表达式的运行结果</li>\n</ol>\n<p>导出一个函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//------ myFunc.js ------</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 没有分号 函数名可有可无</span>\n\n<span class=\"token comment\">//------ main1.js ------</span>\n<span class=\"token keyword\">import</span> myFunc <span class=\"token keyword\">from</span> <span class=\"token string\">'myFunc'</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>导出一个类：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//------ MyClass.js ------</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 没有分号 类名可有可无</span>\n\n<span class=\"token comment\">//------ main2.js ------</span>\n<span class=\"token keyword\">import</span> MyClass <span class=\"token keyword\">from</span> <span class=\"token string\">'MyClass'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> inst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>导出表达式运行结果：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token string\">'abc'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token operator\">/</span><span class=\"token operator\">^</span>xyz$<span class=\"token operator\">/</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token number\">5</span> <span class=\"token operator\">*</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span> no<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> yes<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>前面说的到的导出匿名函数和类，可以将其视为导出表达式的运行结果：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>每一个 default export 都是这种结构：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token operator\">&lt;&lt;</span>expression<span class=\"token operator\">>></span></code></pre></div>\n<p>相当于：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> __default__  <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;&lt;</span>expression<span class=\"token operator\">>></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> __default__ <span class=\"token keyword\">as</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// (A)</span></code></pre></div>\n<p>export后面是不能接变量声明的，因为一个变量声明表达式中可以一次生命多个变量。考虑下面这种情况：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> bar <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> baz <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// not legal JavaScript!</span></code></pre></div>\n<p>应该导出 foo，bar，还是 baz 呢？</p>\n<h5>必须在模块的最顶层使用import和export</h5>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">import</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SyntaxError</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// You can’t even nest `import` and `export`</span>\n<span class=\"token comment\">// inside a simple block:</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">import</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SyntaxError</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5>import 会被提升到当前作用域的顶部</h5>\n<p>模块的 import 会被提升到当前作用域的顶部。所以下面这种情况是可行的：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> foo <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'my_module'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h5>import 的一些细节</h5>\n<p>import的基本语法：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> defaultMember <span class=\"token keyword\">from</span> <span class=\"token string\">\"module-name\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> name <span class=\"token keyword\">from</span> <span class=\"token string\">\"module-name\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> member <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"module-name\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> member <span class=\"token keyword\">as</span> alias <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"module-name\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> member1 <span class=\"token punctuation\">,</span> member2 <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"module-name\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> member1 <span class=\"token punctuation\">,</span> member2 <span class=\"token keyword\">as</span> alias2 <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"module-name\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> defaultMember<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> member <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"module-name\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> defaultMember<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> name <span class=\"token keyword\">from</span> <span class=\"token string\">\"module-name\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"module-name\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>对循环引用的支持</h3>\n<p>什么是循环引用？模块A 引用了模块 B，模块 B 又引用了模块 A。如果可能的话，应该避免这种情况出现，这会使得模块之间过度的耦合。但是这种有时候又是无法避免的。</p>\n<h4>CommonJS 中的循环引用</h4>\n<p>a.js 中的内容：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'模块 a 开始了！'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nexports<span class=\"token punctuation\">.</span>done <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./b.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'在 a 中, b.done = %j'</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nexports<span class=\"token punctuation\">.</span>done <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'模块 a 结束了！'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>b.js 中的内容：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'模块 b 开始了！'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nexports<span class=\"token punctuation\">.</span>done <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./a.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'在 b 中, a.done = %j'</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nexports<span class=\"token punctuation\">.</span>done <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'模块 b 结束了！'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>main.js 中的内容：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'main 开始了！'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./a.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./b.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'在 main 中, a.done=%j, b.done=%j'</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>当 main.js 加载 a.js 时，a.js 又加载 b.js。这个时候，b.js 又会尝试去加载 a.js 。为了防止出现无限循环的加载，a.js 中的 exports 对象会返回一个 unfinished copy 给 b.js 模块。然后模块 b 完成加载，同时将提供模块 a 的接口。当 main.js 加载完 a，b 两个模块之后，输出如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">main 开始了！\n模块 a 开始了！\n模块 b 开始了！\n在 b 中, a.done <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n模块 b 结束了！\n在 a 中, b.done <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n模块 a 结束了！\n在 main 中, a.done<span class=\"token operator\">=</span>true, b.done<span class=\"token operator\">=</span>true</code></pre></div>\n<p>这种方式有其局限性：</p>\n<ul>\n<li>\n<p>Nodejs风格的单个值的导出无法工作。当a使用 module.exports 导出一个值时，那么 b 模块中引用的变量 a 在声明之后就不会再更新</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>无法直接命名你的引用</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">;</span> <span class=\"token comment\">// foo  is undefined</span></code></pre></div>\n</li>\n</ul>\n<h4>ES6中的循环引用</h4>\n<p>ES6中，imports 是 exprts 的只读视图，直白一点就是，imports 都指向 exports 原本的数据，比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//------ lib.js ------</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">incCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    counter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//------ main.js ------</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> counter<span class=\"token punctuation\">,</span> incCounter <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./lib'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The imported value `counter` is live</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n<span class=\"token function\">incCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span>\n<span class=\"token comment\">// The imported value can’t be changed</span>\ncounter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TypeError</span></code></pre></div>\n<p>因此在 ES6中处理循环引用特别简单，看下面这段代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//------ a.js ------</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>bar<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// (i)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// (ii)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//------ b.js ------</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>foo<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// (iii)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// (iv)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>假设先加载模块 a，在模块 a 加载完成之后，bar 间接性地指向的是模块 b 中的 bar。无论是加载命令的 imports 还是未完成的 imports，imports 和 exports 之间都有一个间接的联系，所以总是可以正常工作。</p>\n<h3>ES6 模块加载器 API</h3>\n<p>除了声明式加载模块，ES6还提供了一个可编程的 API：</p>\n<ul>\n<li>以编程的方式使用模块</li>\n<li>配置模块的加载</li>\n</ul>\n<p>要注意，这个 API 并不是ES6标准中的一部分，在“JavaScript Loader Standrad”中，并且具体的标准还在制定中，所以下面讲到的内容都是试验性的。</p>\n<h4>Loaders 的简单使用</h4>\n<p>Loader 用于处理模块标识符和加载模块等。它的 construct 是<code class=\"language-text\">Reflect.Loader</code>。每个平台在全局作用域中都有一个全局变量<code class=\"language-text\">System</code>的实例来实现 loader 的一些特性。</p>\n<p>你可以通过 API 提供的 Promise，以编码的方式 import 一个模块：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">System<span class=\"token punctuation\">.</span><span class=\"token function\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'some_module'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">some_module</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Use some_module</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    ···\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>System.import() 可以：</p>\n<ul>\n<li>可以在 script 标签中使用模块</li>\n<li>有条件地加载模块</li>\n</ul>\n<p>System.import() 返回一个模块, 可以用 Promise.all() 来导入多个模块:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'module1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'module2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'module3'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> System<span class=\"token punctuation\">.</span><span class=\"token function\">import</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>module1<span class=\"token punctuation\">,</span> module2<span class=\"token punctuation\">,</span> module3<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Use module1, module2, module3</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h5>Loader的其他方法</h5>\n<p>Loader 还有一些其他方法，最重要的三个是：</p>\n<ul>\n<li>System.module(source, [options])\n将 source 中的 JavaScript 代码当做一个模块执行，返回一个 Promise</li>\n<li>System.set(name, modules)\n注册一个模块，比如用 System.module 创建的模块</li>\n<li>System.define(name, source, [options])\n执行 source 中的代码，将返回的结果注册为一个模块</li>\n</ul>\n<p>目前 Loader API 还处于试验阶段，更多的细节不想在深入。有兴趣的话可以去看看</p>\n<h3>模块导入的细节</h3>\n<p>在 CommonJS 和 ES6中，两种模块导入方式有一些不同：</p>\n<ul>\n<li>在 CommonJS 中，导入的内容是模块导出的内容的拷贝。</li>\n<li>在 ES6 中，导出值得实时只读视图，类似于引用。</li>\n</ul>\n<p>在 CommonJS 中，如果你将一个导入的值保存到一个变量中，这个值会被复制两次：第一次是这个值所属模块导出时（行 A），第二次是这个值被引用时（行 B）。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//------ lib.js ------</span>\n<span class=\"token keyword\">var</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">incCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    counter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    counter<span class=\"token operator\">:</span> counter<span class=\"token punctuation\">,</span> <span class=\"token comment\">// (A)</span>\n    incCounter<span class=\"token operator\">:</span> incCounter<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//------ main1.js ------</span>\n<span class=\"token keyword\">var</span> counter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./lib'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>counter<span class=\"token punctuation\">;</span> <span class=\"token comment\">// (B)</span>\n<span class=\"token keyword\">var</span> incCounter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./lib'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>incCounter<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The imported value is a (disconnected) copy of a copy</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n<span class=\"token function\">incCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n\n<span class=\"token comment\">// The imported value can be changed</span>\ncounter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span></code></pre></div>\n<p>如果通过 exports对象来访问这个值，这个值还是会再复制一次：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//------ main2.js ------</span>\n<span class=\"token keyword\">var</span> lib <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./lib'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The imported value is a (disconnected) copy</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">.</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\nlib<span class=\"token punctuation\">.</span><span class=\"token function\">incCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">.</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n\n<span class=\"token comment\">// The imported value can be changed</span>\nlib<span class=\"token punctuation\">.</span>counter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">.</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span></code></pre></div>\n<p>和 CommonJS 不同的是，在 ES6中，所有的导入的数据都是导出值的视图，每一个导入的数据都和原始的数据有一个实时连接（并不是 JS 中Object引用的那种概念，因为导出的值可以是一个原始类型，primitive type，而且导入的数据是只读的）。</p>\n<ul>\n<li>无条件的引入 (import x from ‘foo’) 就是用 const 声明的变量</li>\n<li>模块的属性foo (import * as foo from ‘foo’) 则是创建一个 frozen object.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//------ lib.js ------</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">incCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    counter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//------ main1.js ------</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> counter<span class=\"token punctuation\">,</span> incCounter <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./lib'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The imported value `counter` is live</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n<span class=\"token function\">incCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span>\n\n<span class=\"token comment\">// The imported value can’t be changed</span>\ncounter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TypeError</span></code></pre></div>\n<p>如果使用*引入模块，会得到相同的结果：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//------ main2.js ------</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> lib <span class=\"token keyword\">from</span> <span class=\"token string\">'./lib'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 导入的值 counter 是活动的</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">.</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\nlib<span class=\"token punctuation\">.</span><span class=\"token function\">incCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">.</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span>\n\n<span class=\"token comment\">// 导入的值是只读的不能被修改</span>\nlib<span class=\"token punctuation\">.</span>counter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TypeError</span></code></pre></div>\n<p>虽然不能修改导入的值，但是可以修改对象指向的内容，这个 const 常量的处理是一致的。例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//------ lib.js ------</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//------ main.js ------</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> obj <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./lib'</span><span class=\"token punctuation\">;</span>\n\nobj<span class=\"token punctuation\">.</span>prop <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\nobj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TypeError</span></code></pre></div>\n<h3>结束</h3>\n<p>关于更多 ES6 模块相关的内容，有兴趣的朋友可以去下面这些地方看看：</p>\n<ul>\n<li><a href=\"http://exploringjs.com/es6/ch_modules.html\">http://exploringjs.com/es6/ch_modules.html</a></li>\n<li><a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-modules\">http://www.ecma-international.org/ecma-262/6.0/#sec-modules</a></li>\n</ul>\n<p>参考资料：</p>\n<ol>\n<li><a href=\"http://stackoverflow.com/a/40295288\">http://stackoverflow.com/a/40295288</a></li>\n<li><a href=\"http://exploringjs.com/es6/ch_modules.html\">http://exploringjs.com/es6/ch_modules.html</a></li>\n<li><a href=\"http://zhaoda.net/webpack-handbook/amd.html\">http://zhaoda.net/webpack-handbook/amd.html</a></li>\n<li>[<a href=\"https://nodejs.org/api/modules.html%5D)(\">https://nodejs.org/api/modules.html])(</a><a href=\"https://nodejs.org/api/modules.html\">https://nodejs.org/api/modules.html</a>)</li>\n<li><a href=\"http://speakingjs.com/es5/ch17.html#freezing_objects\">http://speakingjs.com/es5/ch17.html#freezing_objects</a></li>\n</ol>","frontmatter":{"title":"JavaScrip模块系统详解","date":"January 11, 2017","description":null,"categories":["前端"],"tags":["JavaScript"]}},"previous":{"fields":{"slug":"/blogs/2017-01-19-整理Object的一些方法/"},"frontmatter":{"title":"整理Object的一些方法"}},"next":{"fields":{"slug":"/blogs/2017-01-05-深入理解 ES6 的解构赋值/"},"frontmatter":{"title":"深入理解 ES6 的解构赋值","draft":null,"tags":["JavaScript"],"categories":["前端"],"status":"publish"}}},"pageContext":{"id":"5176bcfe-d265-559f-9d07-8dddfc44b2f2","previousPostId":"348b5ea1-82fd-5b10-ad86-4c19d744c222","nextPostId":"e505d890-70be-537c-98e2-a66834d88b20"}},
    "staticQueryHashes": ["2841359383"]}