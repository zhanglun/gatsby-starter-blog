{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/blogs/2016-10-30-使用-React-Router-创建单页应用/",
    "result": {"data":{"site":{"siteMetadata":{"title":"张小伦的网络日志","description":"欢迎来到张小伦的网络日志 \n\t\t一个记录生活，分享心得的博客","menu":[{"id":"home","name":"首页","url":"/"},{"id":"category","name":"分类","url":"/categories"},{"id":"archive","name":"归档","url":"/archives"},{"id":"about","name":"关于我","url":"/about"}]}},"markdownRemark":{"id":"73a40493-e4e2-50b9-95cb-fa11134e3d32","html":"<p>最近业余时间在学习 React，配合 Redux 和 React-Router 正在不紧不慢地开发一个小工具<a href=\"https://github.com/zhanglun/moviemaster\">moviemaster</a>，用于管理硬盘中的电影剧集。在单页应用开发中，redux 并不是必须的，所以今天只讲讲 前端的路由系统以及 React-Router的简单使用。</p>\n<!--more-->\n<h3>什么是路由</h3>\n<p>以下来自维基百科：：</p>\n<blockquote>\n<p>路由（routing）就是通过互联的网络把信息从源地址传输到目的地址的活动。路由发生在OSI网络参考模型中的第三层即网路层。</p>\n</blockquote>\n<p>路由引导分组转送，经过一些中间的节点后，到它们最后的目的地。</p>\n<p>这是网络工程中的术语，对大家而言，最熟悉的应该就是家里的路由器。路由是指路由器从一个接口上收到数据包，根据数据包的目的地址进行定向并转发到另一个接口的过程。放在 Web 上来说，url 就像是路由器中的路由表，每个 url 对应不同的页面或者内容，就像路由表中的的 IP 对应不同的网络一样。</p>\n<p>先来看一下熟悉的套路：</p>\n<!-- ![image_1b0a1gh7ge4u1g9l14mm7v41me9a.png](http://7xnrrd.com1.z0.glb.clouddn.com/e4199599d78057a8efacb848ab9b5927.png) -->\n<p>在传统的网页应用架构中，客户端只是一个展示层，通过 url 访问服务端，服务端则根据自己的“路由表”将对应的页面分发给客户端。但是在这种模式下，ajax 异步加载的内容是无法通过url 记录的。无论你在页面上操作了多少，异步请求了多少数据，在每次重新访问同一个 url 时，服务端返回给客户端的内容都是一模一样。</p>\n<!--![image_1b0a24tg94le1p03qa76br1apfg.png](http://7xnrrd.com1.z0.glb.clouddn.com/6ed2cf502e487c30c3640a2026071f87.png) -->\n<p>如果前端有自己专属的“路由表”来分发页面上不同的状态，那不就行了？</p>\n<h3>Hash 和 pushState</h3>\n<p>据我所知，目前有两种方式可以构建出前端的路由系统：url 中的#和 HTML5中的 history API。其原理如下：</p>\n<ol>\n<li>阻止标签的默认跳转动作。</li>\n<li>ajax或者 Fetch 请求内容。</li>\n<li>将返回的内容添加到页面中。</li>\n<li>使用 hash 或者 pushState 修改 url。</li>\n</ol>\n<h4>经典的 Hash</h4>\n<p>#代表网页中的一个位置。后面接着的字符，就是该位置的标识符。比如，</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">https://zhanglun.github.io/index.html<span class=\"token comment\">#body</span></code></pre></div>\n<p>就代表网页 index.html 的 body 位置。浏览器读取这个 URL 后，会自动将body位置滚动至可视区域。标识符的指定有两个方法。</p>\n<ol>\n<li>使用锚点</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;a name=\"body\">&lt;/a></code></pre></div>\n<ol start=\"2\">\n<li>使用id属性</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;div id=\"body\" ></code></pre></div>\n<p>#是用来指向文档的内容，属于浏览器的行为，与服务端无关，在 HTTP请求中也不会携带 #及其后面的内容，对于服务端而言 <a href=\"http://www.baidu.com\">http://www.baidu.com</a> 和 <a href=\"http://www.baidu.com#action=fuckbaidu\">http://www.baidu.com#action=fuckbaidu</a> 返回给客户端的都是前者所分发的内容，但是在浏览器中可以通过 Window 对象上的 <code class=\"language-text\">location.hash</code> 进行操作。因此，在浏览器中可以通过 hash 来记录页面的状态，构建“路由表”。当页面状态发生变化时，hash 相应变化，重新加载时又可以通过 url 中携带的 hash 直接将页面设置到对应的状态。</p>\n<p>比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">http://www.example.com/\nhttp://www.examplt.com/#edit\nhttp://www.examplt.com/#settings</code></pre></div>\n<ol>\n<li>访问<code class=\"language-text\">/</code>时，呈现主页。</li>\n<li>点击页面上的<code class=\"language-text\">Edit</code>按钮，页面呈现编辑对应的内容。通过 url 直接访问时，检查 hash 是否和 <code class=\"language-text\">edit</code> 匹配，如果匹配执行加载编辑内容的代码</li>\n<li>点击页面上的<code class=\"language-text\">Settings</code>按钮，页面呈现设置对应的内容。通过 url 直接访问时，检查 hash 是否和 <code class=\"language-text\">settings</code> 匹配，如果匹配执行加载编辑内容的代码。</li>\n</ol>\n<p>以下是伪代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">function</span> <span class=\"token function\">hashHandler</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> key <span class=\"token operator\">=</span> location<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'edit'</span><span class=\"token operator\">:</span>\n        <span class=\"token function\">renderEditPanel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'settings'</span><span class=\"token operator\">:</span>\n        <span class=\"token function\">renderSettings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">hashHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onhashchange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">hashHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<h4>HTML5 中的 pushState</h4>\n<p>pushState是 History API中的一个方法，其文档可以看这里 <a href=\"https://developer.mozilla.org/zh-CN/docs/DOM/Manipulating_the_browser_history\">MDN History</a>。它的功能简单的说就是：修改 url，添加历史记录。比如<code class=\"language-text\">/blogs</code>和<code class=\"language-text\">settings</code>对应的是两个页面，如果只是在页面上点击标签切换，需要做的操作只有：发送请求修改页面内容和调用 pushState 方法修改 url。问题来了，对于前端而言需要将其视为同一个页面，但实际上这两个 url 对于服务端来说是两个不同的请求，所以这里需要服务端的配合。</p>\n<p>我的做法是：对应的url 返回的都是同一个页面，然后浏览器接受之后检查前端定义路由系统，执行响应的代码。这个方法可能会造成页面平白添加一个短暂的延迟，不过影响不是很大。</p>\n<h3>React-Router的使用</h3>\n<p>目前来说，任何一个路由系统库或者框架，虽说是写法不一，但是都是在上述两种方式的基础上实现的。让我觉得耳目一新的是：使用路由嵌套的概念来定义 view 的嵌套集合，当一个给定的 URL 被调用时，整个集合中（命中的部分）都会被渲染。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Router<span class=\"token punctuation\">,</span> Route<span class=\"token punctuation\">,</span> IndexRoute<span class=\"token punctuation\">,</span> hashHistory <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./containers/App'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> MovieContainer <span class=\"token keyword\">from</span> <span class=\"token string\">'./containers/Movies'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Detail <span class=\"token keyword\">from</span> <span class=\"token string\">'./containers/Detail'</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">let</span> rootElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Router<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>App<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"about\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>About<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"inbox\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>Inbox<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"messages/:id\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>Message<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Route<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Route<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Router<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\nrootElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在入口文件中，引入 React-Router，以组件的形式在 render 中使用，上述代码配置结果如下：</p>\n<table>\n<thead>\n<tr>\n<th>URL</th>\n<th>组件</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/</td>\n<td>App</td>\n</tr>\n<tr>\n<td>/about</td>\n<td>App -> About</td>\n</tr>\n<tr>\n<td>/inbox</td>\n<td>App -> Inbox</td>\n</tr>\n<tr>\n<td>/inbox/messages/:id</td>\n<td>App -> Inbox -> Message</td>\n</tr>\n</tbody>\n</table>\n<p>在路由中，组件对应设置的子组件可以通过 <code class=\"language-text\">this.props.children</code> 渲染在父组件中</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> extend Component <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"app\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Hello<span class=\"token punctuation\">,</span> world<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>当 URL 为 / 时， App 中并没有渲染任何的组件，render 中的 this.props.children 还是 undefined。此时可以使用 <code class=\"language-text\">IndexRoute</code> 来设置一个默认页面。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Router<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>App<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span><span class=\"token comment\">/* 当 url 为/时渲染 Welcome */</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>IndexRoute component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>Welcome<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"about\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>About<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"inbox\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>Inbox<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"messages/:id\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>Message<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Route<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Route<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Router<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\nrootElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<table>\n<thead>\n<tr>\n<th>URL</th>\n<th>组件</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/</td>\n<td>App -> Welcome</td>\n</tr>\n<tr>\n<td>/about</td>\n<td>App -> About</td>\n</tr>\n<tr>\n<td>/inbox</td>\n<td>App -> Inbox</td>\n</tr>\n<tr>\n<td>/inbox/messages/:id</td>\n<td>App -> Inbox -> Message</td>\n</tr>\n</tbody>\n</table>\n<p>看一下这一段代码</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"posts\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>Post<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"users/:userid\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>User<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"messages/:messageid\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>Message<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Route<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Route<span class=\"token operator\">></span></code></pre></div>\n<p>此时匹配的路由分别是：<code class=\"language-text\">/posts</code>，<code class=\"language-text\">/posts/usres/:userid</code> 和<code class=\"language-text\">/posts/users/:userid/messages/:messageid</code>，可以看出，嵌套的<code class=\"language-text\">&lt;Route></code>所匹配的 url是包裹着它的 <code class=\"language-text\">&lt;Route></code>的 path “之和”。但是问题又来了，嵌套的好处在于路由之间结构清晰直观，但是也会导致 url 的不美观，试想<code class=\"language-text\">/posts/users/:userid/messages/:messageid</code>这么长的路由也是着实让人心累。React-Router 的配置提供了一个选择：将 Route 的 path 设置成绝对路径。同时可以使用<code class=\"language-text\">&lt;Redirect/></code> 将修改为绝对路径的路由重定向到之前的设置</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"posts\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>Inbox<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/users/:userid\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>Message<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/messages/:messageid\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>Message<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Route<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Route<span class=\"token operator\">></span></code></pre></div>\n<table>\n<thead>\n<tr>\n<th>URL</th>\n<th>组件</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/posts</td>\n<td>App -> Post</td>\n</tr>\n<tr>\n<td>/user/:userid</td>\n<td>App -> Post -> User</td>\n</tr>\n<tr>\n<td>/messages/:messageid</td>\n<td>App -> Post -> User ->Message</td>\n</tr>\n</tbody>\n</table>\n<p>基础的配置完成之后，通过 <code class=\"language-text\">&lt;Link></code>自动或者通过<code class=\"language-text\">browserHistory</code>和<code class=\"language-text\">hashHistory</code>手动执行路由的跳转。</p>","frontmatter":{"title":"使用 React-Router 创建单页应用","date":"October 30, 2016","description":null,"categories":["前端"],"tags":["React","JavaScript"]}},"previous":{"fields":{"slug":"/blogs/2016-11-11-译-CSS-Grid-Flexbox-和-Box-Alignment-网页布局的新系统/"},"frontmatter":{"title":"【译】CSS Grid, Flexbox 和 Box Alignment:网页布局的新系统"}},"next":{"fields":{"slug":"/blogs/2016-09-25-实现一个稍微复杂的simplelist/"},"frontmatter":{"title":"实现一个稍微复杂的simplelist","draft":null,"tags":["前端"],"categories":["JavaScript"],"status":"publish"}}},"pageContext":{"id":"73a40493-e4e2-50b9-95cb-fa11134e3d32","previousPostId":"e252a29b-3fca-5bb3-a55b-e17e0abdec5d","nextPostId":"d37785c4-2d88-561a-93ee-505739b52f25"}},
    "staticQueryHashes": ["2841359383"]}