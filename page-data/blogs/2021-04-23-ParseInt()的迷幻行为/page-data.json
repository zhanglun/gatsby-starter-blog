{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/blogs/2021-04-23-ParseInt()的迷幻行为/",
    "result": {"data":{"site":{"siteMetadata":{"title":"张小伦的网络日志","description":"欢迎来到张小伦的网络日志 \n\t\t一个记录生活，分享心得的博客","menu":[{"id":"home","name":"首页","url":"/"},{"id":"category","name":"分类","url":"/categories"},{"id":"archive","name":"归档","url":"/archives"},{"id":"about","name":"关于我","url":"/about"}]}},"markdownRemark":{"id":"1a2a07a7-c79d-5a7b-95d0-7530c9be9652","html":"<p>最近看到一片文章 <a href=\"%5Bhttps://dmitripavlutin.com/parseint-mystery-javascript/%5D(https://dmitripavlutin.com/parseint-mystery-javascript/)\">Solving a Mystery Behavior of parseInt() in JavaScript</a>，讲的是JavaScript中的<code class=\"language-text\">parseInt()</code>的一个奇怪现象。</p>\n<p><code class=\"language-text\">parseInt()</code>是JavaScript内置的一个方法，能将数字型的字符串转换成整数。例如， 将 <code class=\"language-text\">'100'</code>转换成<code class=\"language-text\">100</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> number <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'100'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100</span></code></pre></div>\n<p><code class=\"language-text\">parseInt(numbericalString, radix)</code>也可以接受第二个参数，解析一个字符串并返回指定基数的十进制整数， <code class=\"language-text\">radix</code> 是2-36之间的整数，表示被解析字符串的基数，常用的是2，8，10和16。例如</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> number <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'100'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span>\n\n<span class=\"token keyword\">const</span> number <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'100'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 64</span></code></pre></div>\n<p>以上是<code class=\"language-text\">parseInt()</code>的基本用法。</p>\n<h2>parseInt()的一个奇怪行为</h2>\n<p><code class=\"language-text\"> praseInt(numbericalString)</code> 会将其第一个参数转换为一个字符串，对该字符串进行解析，然后返回一个整数或 NaN，所以我们可以用 <code class=\"language-text\">parseInt()</code> 方法来获取浮点数的整数。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// => 0</span>\n<span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.05</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// => 0</span>\n<span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.005</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// => 0</span>\n<span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0005</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// => 0</span>\n<span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.00005</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// => 0</span>\n<span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.000005</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 0</span></code></pre></div>\n<p>获取0.5，0.05这样的浮点数的整数返回<code class=\"language-text\">0</code>，这看起来没有任何问题。但是 <code class=\"language-text\">parseInt()</code> 会讲<code class=\"language-text\">0.0000005</code> 转换成5。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0000005</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span></code></pre></div>\n<p>这到底是为什么呢？</p>\n<h2>解开谜团</h2>\n<p>前面提到 <code class=\"language-text\">parseInt</code> 执行时，会先将第一个参数转换成字符串(<a href=\"https://262.ecma-international.org/5.1/#sec-15.1.2.2\">ECMASCript ParseInt()</a>)。其具体步骤如下，</p>\n<ol>\n<li>声明<code class=\"language-text\">inputString</code> = String(string)。</li>\n<li>声明 <code class=\"language-text\">S</code>, 保存去掉 <code class=\"language-text\">inputString</code> 开头的空格之后的字符串，如果 <code class=\"language-text\">inputString</code> 是空字符串则返回空字符串。</li>\n<li>声明标记位 <code class=\"language-text\">sign</code> = 1。</li>\n<li>如果<code class=\"language-text\">S</code>不为空且第一个字符是减号<code class=\"language-text\">-</code>，<code class=\"language-text\">sign</code>设置为<code class=\"language-text\">-1</code>。</li>\n<li>如果<code class=\"language-text\">S</code>不为空且第一个字符是加号<code class=\"language-text\">+</code>或者减号<code class=\"language-text\">-</code>，移除第一个字符串。</li>\n<li>声明<code class=\"language-text\">R=ToInt32(radix)</code>。</li>\n<li>声明<code class=\"language-text\">stripPrefix = true</code>。</li>\n<li>如果 R !== 0，则</li>\n</ol>\n<ul>\n<li>a. 如果R &#x3C; 2 或者 R > 36，返回NaN。</li>\n<li>b. 如果 R !== 16，设置<code class=\"language-text\">stripPrefix = false</code>。</li>\n</ul>\n<ol start=\"9\">\n<li>如果 R == 0</li>\n</ol>\n<ul>\n<li>a. 设置 R = 10</li>\n</ul>\n<ol start=\"10\">\n<li>如果 stripPrefix === true</li>\n</ol>\n<ul>\n<li>a. 如果S的长度大于2且前两个字符是<code class=\"language-text\">0x</code>或者<code class=\"language-text\">0X</code>，移除前两个字符，同时设置R = 16</li>\n</ul>\n<ol start=\"11\">\n<li>如果S包含了当前R进制不相关的字符（假定第一个这样的字符是Q)，设置Z为S的一个子字符串，这个子字符串是Q之前的所有字符。否则设置Z=S</li>\n<li>如果 <code class=\"language-text\">Z</code> 为空，返回 <code class=\"language-text\">NaN</code></li>\n<li>声明 <code class=\"language-text\">mathInt</code> 为Z在当前R进制下的整数</li>\n<li>声明 <code class=\"language-text\">number</code> 为 <code class=\"language-text\">mathInt</code></li>\n<li>返回 <code class=\"language-text\">sign x number</code></li>\n</ol>\n<p>那我们先用 <code class=\"language-text\">String()</code> 来测试</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// => '0.5'</span>\n<span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.05</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// => '0.05'</span>\n<span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.005</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// => '0.05'</span>\n<span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0005</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// => '0.005' </span>\n<span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.00005</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// => '0.00005'</span>\n<span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.000005</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => '0.000005'</span>\n\n<span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0000005</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => '5e-7'</span></code></pre></div>\n<p>可以看到<code class=\"language-text\">String(0.0000005)</code>返回了科学计数法的格式<code class=\"language-text\">5e-7</code>，那么按照上面提到的 <code class=\"language-text\">parseInt()</code> 的实际处理过程，确实是返回<code class=\"language-text\">5</code>。由于某些数字在其字符串表示形式中使用e字符（例如 6.022×23 表示 6.022e23 ），因此当对非常大或非常小的数字使用数字时，使用 <code class=\"language-text\">parseInt</code> 截断数字将产生意外结果。</p>\n<p>将浮点数转换成整数的另一个更加安全的是 <code class=\"language-text\">Math.floor()</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// => 0</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.05</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// => 0</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.005</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// => 0</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0005</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// => 0</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.00005</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// => 0</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.000005</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 0</span>\n\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0000005</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 0</span></code></pre></div>\n<p>那 parseInt(999999999999999999999) 返回多少呢？</p>\n<h2>参考文章</h2>\n<ol>\n<li><a href=\"https://dmitripavlutin.com/parseint-mystery-javascript/\">Solving a Mystery Behavior of parseInt() in JavaScript</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt\">MDN ParseInt</a></li>\n<li><a href=\"https://262.ecma-international.org/5.1/#sec-15.1.2.2\">ECMASCript ParseInt()</a></li>\n</ol>","frontmatter":{"title":"ParseInt()的迷幻行为","date":"April 23, 2021","description":null,"categories":[],"tags":[]}},"previous":null,"next":{"fields":{"slug":"/blogs/2020-12-14-随机的联想/"},"frontmatter":{"title":"关于JavaScript的随机数","draft":false,"tags":[],"categories":[],"status":"publish"}}},"pageContext":{"id":"1a2a07a7-c79d-5a7b-95d0-7530c9be9652","previousPostId":null,"nextPostId":"3b5e5306-319c-5088-aa2b-f2c4c6794b62"}},
    "staticQueryHashes": ["2841359383"]}