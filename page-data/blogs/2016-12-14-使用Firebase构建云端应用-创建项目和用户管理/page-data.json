{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/blogs/2016-12-14-使用Firebase构建云端应用-创建项目和用户管理/",
    "result": {"data":{"site":{"siteMetadata":{"title":"张小伦的网络日志","description":"欢迎来到张小伦的网络日志 \n\t\t一个记录生活，分享心得的博客","menu":[{"id":"home","name":"首页","url":"/"},{"id":"category","name":"分类","url":"/categories"},{"id":"archive","name":"归档","url":"/archives"},{"id":"about","name":"关于我","url":"/about"}]}},"markdownRemark":{"id":"09acf9ab-d33f-54fa-ba49-da7751029a73","html":"<p>在构建自己的在线云工具应用时，我使用 Firebase 为自己的“无后端项目”提供服务，把在开发期间接触到的一些内容整理在一起，制成系列笔记。这个过程有两个好处：巩固知识点，整理开发过程的思路。因为前端开发是自己所熟悉的领域，所以先从 Firebase 入手，将后端的一些知识点提前梳理理顺，避免后续的学习过程中的卡壳而导致无法坚持。今天第一期：创建项目和用户管理。</p>\n<!--more-->\n<h3>什么是 Firebase</h3>\n<p>Firebase 原本是一家实时后端数据库创业公司，为提供一个实时响应的数据服务。后被 Google 收购，该平台适用在IOS、Android、web前端等各种跨平台上，对于没有数据库处理经验的开发者，只需使用自己熟悉的语言将数据放在Firebase上，再通过Firebase提供的API即可实现实时数据同步。同时 Google 在新版的 Firebase 中包含开发、成长与营收三阶段，并整合分析工具，不过分析工具目前只针对移动 App，网页的话可以继续使用 Google Analytics。</p>\n<p>何谓“实时数据库”？简单粗暴的理解就是，数据库中数据的变动会互动通知到客户端。同一账号在客户端 A出操作，客户端 B 会收到相应的通知。根据我在浏览器中的调试，发现在 Web 端 原来是用的 WebSocket。考虑到写数据时遇到的无网络连接问题，Firebase的数据库API使用了本地缓存，使得在离线状态下也能保持读写不失败，并且会在网络恢复连接时和服务器进行同步。</p>\n<p>Firebase 提供了四种 SDK: Android，IOS, Web 和 C++。我将使用 Web 端 SDK 开发一个无后端的笔记应用。</p>\n<h3>关联应用</h3>\n<p>在使用 Firebase 作为后端数据库之前，需要登录 <a href=\"https://console.firebase.google.com/\">Firebase 的控制台</a>，添加一个 Firebase 的网络应用。你可选择新建一个应用，或者导入一个现有的 Google 项目。</p>\n<p>创建完应用之后，进入应用的控制面板，在 ‘<a href=\"https://console.firebase.google.com/project/your-app-id/overview%E2%80%99\">https://console.firebase.google.com/project/your-app-id/overview’</a> 中可以看到硕大的绑定入口“将 Firebase 添加到您的网页应用”，点击之后，将给处的 JavaScript 添加到 HTML 文件中。</p>\n<div class=\"gatsby-highlight\" data-language=\"code\"><pre class=\"language-code\"><code class=\"language-code\"> &lt;script src=&quot;https://www.gstatic.com/firebasejs/3.4.0/firebase.js&quot;&gt;&lt;/script&gt;\n  &lt;script&gt;\n    // Initialize Firebase\n    let config = {\n      apiKey: &#39;&lt;your-api-key&gt;&#39;,\n      authDomain: &#39;&lt;your-auth-domain&gt;&#39;,\n      databaseURL: &#39;&lt;your-database-url&gt;&#39;,\n      storageBucket: &#39;&lt;your-storage-bucket&gt;&#39;\n    };\n    firebase.initializeApp(config);\n  &lt;/script&gt;</code></pre></div>\n<p>当然也可通过 npm 安装 Firebase 的 SDK <a href=\"https://www.npmjs.com/package/firebase\">npm link</a>，然后通过 Webpack 等工具打包。</p>\n<div class=\"gatsby-highlight\" data-language=\"code\"><pre class=\"language-code\"><code class=\"language-code\">npm install --save firebase</code></pre></div>\n<p>引入 Firebase</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> firebase <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'firebase'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> app <span class=\"token operator\">=</span> firebase<span class=\"token punctuation\">.</span><span class=\"token function\">initializeApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>完整的 Firebase 客户端包包含了Firebase 的 Authentication, Realtime Database, Storage 和 Cloud Messaging。上面的代码将会把这些功能全部引入。可以将这些功能以独立组件的形式引入，减少代码量。</p>\n<ul>\n<li>firebase-app 核心代码（必需）</li>\n<li>firebase-auth Authentication（可选）</li>\n<li>firebase-database Realtime Database（可选）</li>\n<li>firebase-storage Storage（可选）</li>\n<li>firebase-messaging Cloud Messagin（可选）</li>\n</ul>\n<p>在这个案例中 Cloud Messaging 针对的是移动端，所以不引入。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> firebase <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'firebase/app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'firebase/auth'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'firebase/database'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">let</span> app <span class=\"token operator\">=</span> firebase<span class=\"token punctuation\">.</span><span class=\"token function\">initializeApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p>完成上述步骤之后，你已经可以在环境中使用 firebase 提供的各种接口了。</p>\n<h3>用户</h3>\n<p>大多数应用都需要了解用户的身份。知道用户的身份可以让应用将用户数据安全地保存在云中并跨所有用户设备提供相同的个性化体验。\nFirebase Authentication 提供后端服务、易用 SDK 和现成 UI 库来向应用验证用户的身份。它支持使用密码、深受欢迎的联合用户身份提供商（如 Google、Facebook 和 Twitter）等方法进行身份验证。</p>\n<p>本次案例使用第三方登录，不使用 Firebase 提供的 UI库，有兴趣的朋友可以自己去试试 <a href=\"https://github.com/firebase/FirebaseUI-Web\">https://github.com/firebase/FirebaseUI-Web</a>。</p>\n<p>在添加了 Firebase应用之后，打开console的 Authentication，在登录方法中开启需要的登录提供商。这里我选择了“电子邮件地址/密码”和“Github“两种方式。</p>\n<h4>创建基于密码的帐户</h4>\n<p>在用户填写表单注册时，完成所需的任何新帐户验证步骤，例如验证新帐号密码键入正确，或者检查账号是否已经存在。然后\n将邮件地址和密码传递到 createUserWithEmailAndPassword 方法中来创建新帐户：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">firebase<span class=\"token punctuation\">.</span><span class=\"token function\">auth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">signInWithEmailAndPassword</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Handle Errors here.</span>\n  <span class=\"token keyword\">let</span> errorCode <span class=\"token operator\">=</span> error<span class=\"token punctuation\">.</span>code<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> errorMessage <span class=\"token operator\">=</span> error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>用户首次登录后，便会建立一个新用户帐户并链接至该用户登录时使用的凭据，即用户名和密码，或身份验证提供程序信息。此新帐户存储在 Firebase 项目中，可用于跨项目中的每个应用识别用户，无论该用户如何登录。</p>\n<h4>使用 Github 账号登录</h4>\n<p>在console 中的登录方式中启用 github 登录之后，需要添加从 GitHub 获得的 OAuth 2.0 客户端 ID 和客户端密钥。同时将你的 Github 应用的授权回调地址设置为 Firebase OAuth 重定向 URI（例如 my-app-12345.firebaseapp.com/__/auth/handler）。<a href=\"https://github.com/settings/developers\">Github 的应用配置</a></p>\n<p>上述前期工作准备就绪之后，可以开始使用 Firebase SDK 来使用登录流程。</p>\n<p>先创建一个 GitHub 提供程序对象的实例：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> provider <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">firebase<span class=\"token punctuation\">.</span>auth<span class=\"token punctuation\">.</span>GithubAuthProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>然后是一个可选的步骤：从身份验证提供程序中指定您想请求的其他 OAuth 2.0 范围。调用 Provider 实例的 addScope方法来添加范围。例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">provider<span class=\"token punctuation\">.</span><span class=\"token function\">addScope</span><span class=\"token punctuation\">(</span><span class=\"token string\">'repo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>详细参数可以参考<a href=\"https://developer.github.com/v3/oauth/#scopes\">身份验证提供程序文档</a>。</p>\n<p>接下来，使用 GitHub 提供程序对象进行 Firebase 身份验证。可以提示用户，让其通过打开弹出式窗口或重定向登录页面的方法以自己的 GitHub account 登录。移动设备最好使用重定向方法。要用弹出式窗口的方法登录，调用 signInWithPopup：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">firebase<span class=\"token punctuation\">.</span><span class=\"token function\">auth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">signInWithPopup</span><span class=\"token punctuation\">(</span>provider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// This gives you a GitHub Access Token. You can use it to access the GitHub API.</span>\n  <span class=\"token keyword\">let</span> token <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>credential<span class=\"token punctuation\">.</span>accessToken<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// The signed-in user info.</span>\n  <span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Handle Errors here.</span>\n  <span class=\"token keyword\">let</span> errorCode <span class=\"token operator\">=</span> error<span class=\"token punctuation\">.</span>code<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> errorMessage <span class=\"token operator\">=</span> error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// The email of the user's account used.</span>\n  <span class=\"token keyword\">let</span> email <span class=\"token operator\">=</span> error<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// The firebase.auth.AuthCredential type that was used.</span>\n  <span class=\"token keyword\">let</span> credential <span class=\"token operator\">=</span> error<span class=\"token punctuation\">.</span>credential<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>你可以检索 GitHub 提供程序的 OAuth 令牌，使用该令牌可通过 GitHub API 提取额外数据。\n还可以通过这种方法捕获并处理错误。<a href=\"https://firebase.google.com/docs/reference/js/firebase.auth.Auth?hl=zh-cn#signInWithPopup\">获取错误代码列表</a>。</p>\n<p>如果要用重定向登录页面的方法登录，则调用 signInWithRedirect：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">firebase<span class=\"token punctuation\">.</span><span class=\"token function\">auth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">signInWithRedirect</span><span class=\"token punctuation\">(</span>provider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>不仅如此，你还可以在页面加载时通过调用 getRedirectResult 检索 GitHub 提供程序的 OAuth 令牌：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">firebase<span class=\"token punctuation\">.</span><span class=\"token function\">auth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRedirectResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>credential<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// This gives you a GitHub Access Token. You can use it to access the GitHub API.</span>\n    <span class=\"token keyword\">let</span> token <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>credential<span class=\"token punctuation\">.</span>accessToken<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// The signed-in user info.</span>\n  <span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Handle Errors here.</span>\n  <span class=\"token keyword\">let</span> errorCode <span class=\"token operator\">=</span> error<span class=\"token punctuation\">.</span>code<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> errorMessage <span class=\"token operator\">=</span> error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// The email of the user's account used.</span>\n  <span class=\"token keyword\">let</span> email <span class=\"token operator\">=</span> error<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// The firebase.auth.AuthCredential type that was used.</span>\n  <span class=\"token keyword\">let</span> credential <span class=\"token operator\">=</span> error<span class=\"token punctuation\">.</span>credential<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>当然，你也可以手动处理登录流程。 在 GitHub 登录流程结束后，你会收到一个 OAuth 2.0 访问令牌。在用户使用 GitHub 成功登录之后，先使用 OAuth 2.0 访问令牌换取 Firebase 凭据：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> credential <span class=\"token operator\">=</span> firebase<span class=\"token punctuation\">.</span>auth<span class=\"token punctuation\">.</span>GithubAuthProvider<span class=\"token punctuation\">.</span><span class=\"token function\">credential</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>然后使用 Firebase 凭据进行 Firebase 身份验证：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">firebase<span class=\"token punctuation\">.</span><span class=\"token function\">auth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">signInWithCredential</span><span class=\"token punctuation\">(</span>credential<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Handle Errors here.</span>\n  <span class=\"token keyword\">let</span> errorCode <span class=\"token operator\">=</span> error<span class=\"token punctuation\">.</span>code<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> errorMessage <span class=\"token operator\">=</span> error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// The email of the user's account used.</span>\n  <span class=\"token keyword\">let</span> email <span class=\"token operator\">=</span> error<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// The firebase.auth.AuthCredential type that was used.</span>\n  <span class=\"token keyword\">let</span> credential <span class=\"token operator\">=</span> error<span class=\"token punctuation\">.</span>credential<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>除了前面提到的邮箱密码验证，第三方 OAuth 验证之外，Firebase 还支持自定义身份认证系统和匿名身份验证，这里不讲，有兴趣和需求的朋友可以自己去了解。</p>\n<h4>其他用户管理操作的支持</h4>\n<p>要注销用户，调用 signOut：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">firebase<span class=\"token punctuation\">.</span><span class=\"token function\">auth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">signOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Sign-out successful.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// An error happened.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>除此之外，SDK 还提供了一系列用户管理的方法。</p>\n<ul>\n<li>获取当前登录的用户</li>\n</ul>\n<p>获取当前用户的推荐方法是在 Auth 对象上调用<code class=\"language-text\">onAuthStateChanged</code>方法，这可确保在您获取当前用户时，Auth 对象不会处于中间状态，例如初始化。既要么未登录，要么已登录。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">firebase<span class=\"token punctuation\">.</span><span class=\"token function\">auth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">onAuthStateChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// User is signed in.</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// No user is signed in.</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>也可以使用 currentUser 属性获取当前已登录的用户。 如果用户没有登录，currentUser 则为 null：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> firebase<span class=\"token punctuation\">.</span><span class=\"token function\">auth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>currentUser<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// User is signed in.</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// No user is signed in.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>不过有一点要注意，currentUser 还可能由于 auth 对象尚未完成初始化而为 null。 如果使用观察程序跟踪用户登录状态，则无需处理该情况。\n当获取到用户对象的实例之后，可以访问实例上的一些属性，以及调用实例上的一些方法对用户进行一些操作，比如：</p>\n<ul>\n<li>要获取用户的个人资料信息：</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> firebase<span class=\"token punctuation\">.</span><span class=\"token function\">auth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>currentUser<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> name<span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">,</span> photoUrl<span class=\"token punctuation\">,</span> uid<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  name <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>displayName<span class=\"token punctuation\">;</span>\n  email <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">;</span>\n  photoUrl <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>photoURL<span class=\"token punctuation\">;</span>\n  uid <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>uid<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// The user's ID, unique to the Firebase project. Do NOT use</span>\n                   <span class=\"token comment\">// this value to authenticate with your backend server, if</span>\n                   <span class=\"token comment\">// you have one. Use User.getToken() instead.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>获取用户的特定于提供程序的个人资料信息(登录提供程序中获取检索到的个人资料信息)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> firebase<span class=\"token punctuation\">.</span><span class=\"token function\">auth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>currentUser<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  user<span class=\"token punctuation\">.</span>providerData<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">profile</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sign-in provider: \"</span><span class=\"token operator\">+</span>profile<span class=\"token punctuation\">.</span>providerId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"  Provider-specific UID: \"</span><span class=\"token operator\">+</span>profile<span class=\"token punctuation\">.</span>uid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"  Name: \"</span><span class=\"token operator\">+</span>profile<span class=\"token punctuation\">.</span>displayName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"  Email: \"</span><span class=\"token operator\">+</span>profile<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"  Photo URL: \"</span><span class=\"token operator\">+</span>profile<span class=\"token punctuation\">.</span>photoURL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>更新用户个人资料(显示名称和头像地址)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> firebase<span class=\"token punctuation\">.</span><span class=\"token function\">auth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>currentUser<span class=\"token punctuation\">;</span>\n\nuser<span class=\"token punctuation\">.</span><span class=\"token function\">updateProfile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  displayName<span class=\"token operator\">:</span> <span class=\"token string\">\"Jane Q. User\"</span><span class=\"token punctuation\">,</span>\n  photoURL<span class=\"token operator\">:</span> <span class=\"token string\">\"https://example.com/jane-q-user/profile.jpg\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Update successful.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// An error happened.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>设置电子邮件地址</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> firebase<span class=\"token punctuation\">.</span><span class=\"token function\">auth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>currentUser<span class=\"token punctuation\">;</span>\n\nuser<span class=\"token punctuation\">.</span><span class=\"token function\">updateEmail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user@example.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Update successful.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// An error happened.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>要设置用户的电子邮件地址，该用户必须最近登录过</strong>。在 Firebase 控制台的”Authentication”的”Email Templates”页面中允许自定义使用的电子邮件模板。</p>\n<ul>\n<li>设置用户密码</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> firebase<span class=\"token punctuation\">.</span><span class=\"token function\">auth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>currentUser<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> newPassword <span class=\"token operator\">=</span> <span class=\"token function\">getASecureRandomPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nuser<span class=\"token punctuation\">.</span><span class=\"token function\">updatePassword</span><span class=\"token punctuation\">(</span>newPassword<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Update successful.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// An error happened.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>删除用户</li>\n</ul>\n<p>也可以在控制台中手动删除用户</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> firebase<span class=\"token punctuation\">.</span><span class=\"token function\">auth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>currentUser<span class=\"token punctuation\">;</span>\n\nuser<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// User deleted.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// An error happened.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>有些安全敏感性操作，比如删除帐户、设置主电子邮件地址和更改密码，需要用户最近登录过才能执行。如果要执行这些操作中的某一项，而用户只是在很久以前登录过，操作便出错。发生这种错误时，需要从用户获取新登录凭据，将该凭据传给 reauthenticate ，对该用户重新进行身份验证。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> firebase<span class=\"token punctuation\">.</span><span class=\"token function\">auth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>currentUser<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> credential<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Prompt the user to re-provide their sign-in credentials</span>\n\nuser<span class=\"token punctuation\">.</span><span class=\"token function\">reauthenticate</span><span class=\"token punctuation\">(</span>credential<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// User re-authenticated.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// An error happened.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>结束</h3>\n<p>如此一来，我的应用已经可以支持邮箱密码登录，github 账号登录。而且用户的管理操作也有很直接明了的方法。当用户添加之后，接下来就可以围绕用户设计出需要的数据结构了。下回：数据结构的定义及数据的操作，敬请期待</p>","frontmatter":{"title":"使用Firebase构建云端应用:创建项目和用户管理","date":"December 14, 2016","description":null,"categories":["前端"],"tags":["React","JavaScript"]}},"previous":{"fields":{"slug":"/blogs/2016-12-24-使用Firebase构建云端应用-数据库的管理/"},"frontmatter":{"title":"使用Firebase构建云端应用-数据库的管理"}},"next":{"fields":{"slug":"/blogs/2016-11-11-译-CSS-Grid-Flexbox-和-Box-Alignment-网页布局的新系统/"},"frontmatter":{"title":"【译】CSS Grid, Flexbox 和 Box Alignment:网页布局的新系统","draft":null,"tags":["CSS","译文"],"categories":["博客译文"],"status":"publish"}}},"pageContext":{"id":"09acf9ab-d33f-54fa-ba49-da7751029a73","previousPostId":"6dde36ee-010c-5afa-82f1-20f890b77d5e","nextPostId":"e252a29b-3fca-5bb3-a55b-e17e0abdec5d"}},
    "staticQueryHashes": ["2841359383"]}