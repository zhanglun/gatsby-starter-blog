{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/blogs/Node学习笔记-Wrangling the File System/",
    "result": {"data":{"site":{"siteMetadata":{"title":"张小伦的网络日志","description":"欢迎来到张小伦的网络日志 \n\t\t一个记录生活，分享心得的博客","menu":[{"id":"home","name":"首页","url":"/"},{"id":"category","name":"分类","url":"/categories"},{"id":"archive","name":"归档","url":"/archives"},{"id":"about","name":"关于我","url":"/about"}]}},"markdownRemark":{"id":"bf2ae161-f80a-5041-abe0-f22c8bc6e8cd","html":"<p>在开发过程中，有时候会需要访问一些本地的文件，对文件进行一些操作。现在来对这方面的问题展开学习。下面是几个简单的例子，包括监听文件的变化和读取命令行中的参数</p>\n<h2>监听文件的变化</h2>\n<p>不急着动手，先想想如果做。首先，Node需要访问本地的文件，访问到文件后才有办法监听。Node自带<code class=\"language-text\">fs</code>模块可以帮助访问本地文件，更巧的是，fs模块本身就提供了<a href=\"http://nodejs.org/api/fs.html#fs_fs_watch_filename_options_listener\">watch()</a>这个方法。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'target.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"File 'target.txt' just changed!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Now watching target.txt for changes...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>很简单的例子，自己的笔记就没有必要再解释了。无非就是，在引入fs模块之后，调用fs提供的watch方法对文件进行监听，监听时，每发生了修改就调用watch方法中的回调函数，打印出“File ‘target.txt’ just changed!”</p>\n<h2>现在来说说如何在Node中读取命令行中的参数</h2>\n<p>在上面的例子上稍微修改。需要用到新的东西：Node中的一个全局对象<a href=\"http://nodejs.org/api/process.html#process_process\"><code class=\"language-text\">process</code></a>。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    filename <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A file to watch  must be specified\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"File \"</span> <span class=\"token operator\">+</span> filename <span class=\"token operator\">+</span> <span class=\"token string\">\" just changed!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Now watching \"</span> <span class=\"token operator\">+</span> filename <span class=\"token operator\">+</span> <span class=\"token string\">\" for changes...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>保存文件之后，可以像这样启动它：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">node watcher-argv.js target.txt</code></pre></div>\n<p>效果看起来和上面一个例子简直是一模一样的，但是后者的代码更加灵活，因为监控的文件是以参数的形式传递给函数，而不是写死在源代码中。</p>\n<p>这个<code class=\"language-text\">process</code>全局对象可以在Node的任何地方使用，它是 EventEmitter的一个实例。<a href=\"http://nodejs.org/api/process.html#process_process_argv\">process.argv</a>是一个数组，它包含了命令行中的参数。第一个元素一定是”node”，或者<code class=\"language-text\">node.exe</code>的路径，第二个元素是当前执行的js文件的路径，第三个之后，包括第三个的元素都来自命令行参数。如果输出<code class=\"language-text\">process.aegv</code>的话，在我的window下，如果是CMD中，第一个元素是一个字符串“node”，在powershell中第一个元素是<code class=\"language-text\">node.exe</code>的路径。</p>\n<h2>Spawning a Child Process</h2>\n<p>现在利用Node中的<a href=\"http://nodejs.org/api/child_process.html\"><code class=\"language-text\">child-process</code></a>的模块，来增强我们的程序。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    spawn <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'child_process'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>spawn<span class=\"token punctuation\">,</span>\r\n    filename <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>filename<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">throw</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A file to watch must be specified!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">var</span> ls <span class=\"token operator\">=</span> <span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ls'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'-lh'</span><span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    ls<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Now watching \"</span> <span class=\"token operator\">+</span> filename <span class=\"token operator\">+</span> <span class=\"token string\">\" for changes...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>修改文件之后，你会发现在终端中会这样显示：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">-rw-r--r-- <span class=\"token number\">1</span> CrispElite Admin 0B Dec <span class=\"token number\">19</span> <span class=\"token number\">22</span>:45 target.txt</code></pre></div>\n<p>关于<code class=\"language-text\">spawn</code>的使用，官方给出的<a href=\"http://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options\">文档</a>很详细。\r\n<code class=\"language-text\">spawn()</code>的调用实质上运行给的命令指定的进程，数组中的元素是这条命令的参数。参数默认情况下是一个空数组。这个方法返回一个<code class=\"language-text\">ChildProcess</code>对象，它的<code class=\"language-text\">stdin</code>,<code class=\"language-text\">stdout</code>,<code class=\"language-text\">stderr</code> 都是可以访问的数据流。而<code class=\"language-text\">pipe</code>的作用就是将子进程的数据直接发送到标准输出流中。</p>\n<h2>Capturing Data from an EventEmitter</h2>\n<p>==！（未完……）</p>\n<p>参考： <strong>Nodejs the right way</strong></p>","frontmatter":{"title":"Node学习笔记-Wrangling the File System","date":"November 07, 2014","description":null,"categories":["Node.js"],"tags":["笔记","Node.js"]}},"previous":{"fields":{"slug":"/blogs/定时将图片保存在SAE的Storage中/"},"frontmatter":{"title":"定时将图片保存在SAE的Storage中"}},"next":{"fields":{"slug":"/blogs/Node学习笔记-Data Sources and Flow Control/"},"frontmatter":{"title":"Node学习笔记-Data Sources and Flow Control","draft":null,"tags":["笔记","Node.js"],"categories":["Node.js"],"status":"publish"}}},"pageContext":{"id":"bf2ae161-f80a-5041-abe0-f22c8bc6e8cd","previousPostId":"ff497475-4873-596d-9757-115fb47a05da","nextPostId":"889fa597-2cd6-5eca-9214-ceb65bc5b7b7"}},
    "staticQueryHashes": ["2841359383"]}