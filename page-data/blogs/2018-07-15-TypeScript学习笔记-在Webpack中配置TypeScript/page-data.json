{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/blogs/2018-07-15-TypeScript学习笔记-在Webpack中配置TypeScript/",
    "result": {"data":{"site":{"siteMetadata":{"title":"张小伦的网络日志","description":"欢迎来到张小伦的网络日志 \n\t\t一个记录生活，分享心得的博客","menu":[{"id":"home","name":"首页","url":"/"},{"id":"category","name":"分类","url":"/categories"},{"id":"archive","name":"归档","url":"/archives"},{"id":"about","name":"关于我","url":"/about"}]}},"markdownRemark":{"id":"158ce494-b9c9-54ee-b68c-3e333c497589","html":"<p>上篇说到TypeScript简单的基本知识，包括什么是TypeScript、TypeScript的安装以及TypeScript中的基本类型。今天来了解一下如何在Webpack中配置TypeScript。</p>\n<!--more-->\n<h2>tsconfig.json</h2>\n<p>首先，先来认识一下 TypeScript 中的配置文件<code class=\"language-text\">tsconfig.json</code>。之前提到过，TypeScript 在全局安装之后，便可以通过 <code class=\"language-text\">tsc</code> 命令来执行.ts文件的编译。<code class=\"language-text\">tsconfig.json</code> 可以指定编译时的各种参数。如果一个目录下存在一个 <code class=\"language-text\">tsconfig.json</code> 文件，那么它意味着这个目录是TypeScript项目的根目录。</p>\n<p>使用<code class=\"language-text\">tsc</code>命令时，在不带任何输入文件的情况下，编译器会从当前目录开始去查找 <code class=\"language-text\">tsconfig.json</code> 文件，逐级向上搜索父目录。如果带上命令行参数—project（或-p），则指定一个包含 <code class=\"language-text\">tsconfig.json</code>。在命令行上指定的编译选项会覆盖在 <code class=\"language-text\">tsconfig.json</code> 文件里的相应选项。文件的目录。如果命令行指定了配置文件，将会采用指定的文件作为配置输入，即使当前目录中已经存在 <code class=\"language-text\">tsconfig.json</code>。</p>\n<p>来看一个简单的<code class=\"language-text\">tsconfig.json</code>配置：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n   <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"system\"</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 指定生成哪个模块系统代码： \"None\"， \"CommonJS\"， \"AMD\"， \"System\"， \"UMD\"， \"ES6\"或 \"ES2015\"。 只有 \"AMD\"和 \"System\"能和 --outFile一起使用。 \"ES6\"和 \"ES2015\"可使用在目标输出为 \"ES5\"或更低的情况下。</span>\n    <span class=\"token property\">\"noImplicitAny\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"removeComments\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"preserveConstEnums\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"outFile\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./dist/\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"sourceMap\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"src/**/*\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"exclude\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"node_modules\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"**/*.spec.ts\"</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code class=\"language-text\">compilerOptions</code> 可以为空，此时编译器会使用默认值。这里有完整的<a href=\"https://www.typescriptlang.org/docs/handbook/compiler-options.html\">compilerOptions</a>。</p>\n<p><code class=\"language-text\">files</code> 指定一个包含相对或绝对文件路径的列表。 <code class=\"language-text\">include</code> 和 <code class=\"language-text\">exclude</code> 属性指定一个文件glob匹配模式列表。 支持的glob通配符有：</p>\n<ul>\n<li>* 匹配0或多个字符（不包括目录分隔符）</li>\n<li>? 匹配一个任意字符（不包括目录分隔符）</li>\n<li>**/ 递归匹配任意子目录</li>\n</ul>\n<p>如果一个glob模式里的某部分只包含 * 或 .*，那么仅有支持的文件扩展名类型被包含在内（比如默认.ts，.tsx，和.d.ts， 如果 allowJs设置能true还包含.js和.jsx）。</p>\n<p>如果 <code class=\"language-text\">files</code> 和 <code class=\"language-text\">include</code> 都没有被指定，<strong>编译器默认包含当前目录和子目录下所有的 TypeScript 文件（.ts, .d.ts 和 .tsx）</strong>，排除在”exclude”里指定的文件。JS文件（.js和.jsx）也被包含进来如果allowJs被设置成true。 如果指定了 “files”或”include”，编译器会将它们结合一并包含进来。 使用 “outDir”指定的目录下的文件永远会被编译器排除，除非你明确地使用”files”将其包含进来（这时就算用exclude指定也没用）。</p>\n<p>使用 <code class=\"language-text\">include</code> 引入的文件可以使用 <code class=\"language-text\">exclude</code> 属性过滤。 然而，通过 <code class=\"language-text\">files</code> 属性明确指定的文件却总是会被包含在内，不管 <code class=\"language-text\">exclude</code> 如何设置。 如果没有特殊指定， <code class=\"language-text\">exclude</code> 默认情况下会排除 <code class=\"language-text\">node_modules</code>，<code class=\"language-text\">bower_components</code>，<code class=\"language-text\">jspm_packages</code>和<code class=\"language-text\">&lt;outDir></code>目录。</p>\n<p>任何被 <code class=\"language-text\">files</code> 或 <code class=\"language-text\">include</code> 指定的文件所引用的文件也会被包含进来。 A.ts引用了B.ts，因此B.ts不能被排除，除非引用它的A.ts在 <code class=\"language-text\">exclude</code> 列表中。</p>\n<p>需要注意编译器不会去引入那些可能做为输出的文件；比如，假设我们包含了index.ts，那么index.d.ts和index.js会被排除在外。 通常来讲，不推荐只有扩展名的不同来区分同目录下的文件。</p>\n<p><code class=\"language-text\">tsconfig.json</code> 文件可以是个空文件，那么所有默认的文件（如上面所述）都会以默认配置选项编译。</p>\n<h2>与Webpack集成</h2>\n<p>如果你已经有webpack的使用经验的话，这一步将会非常简单。设置好 <code class=\"language-text\">tsconfig.json</code> 之后，只需要针对 <code class=\"language-text\">ts</code> 文件配置对应的Loader即可。</p>\n<p>1、首先需要安装必备的几个package:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev typescript ts-loader</code></pre></div>\n<p>2、 设置基本的 <code class=\"language-text\">tsconfig.json</code> 配置，来支持 JSX，并将 TypeScript 编译到 ES5……</p>\n<p><strong>tsconfig.json</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./dist/\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noImplicitAny\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es6\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"jsx\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"allowJs\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"sourceMap\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>   \n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>3、在 webpack 配置中处理 TypeScript：</p>\n<p><strong>webpack.config.js</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  entry<span class=\"token operator\">:</span> <span class=\"token string\">'./src/index.ts'</span><span class=\"token punctuation\">,</span>\n  devtool<span class=\"token operator\">:</span> <span class=\"token string\">'inline-source-map'</span><span class=\"token punctuation\">,</span>\n  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.ts|.tsx$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        exclude<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'node_modules'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n              loader<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'ts-loader'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  resolve<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    extensions<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'.tsx'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.ts'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.js'</span> <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  output<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    filename<span class=\"token operator\">:</span> <span class=\"token string\">'bundle.js'</span><span class=\"token punctuation\">,</span>\n    path<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这会直接将 webpack 的入口起点指定为 ./index.ts，然后通过 ts-loader _加载所有的 .ts 和 .tsx 文件，并且在当前目录输出_一个 bundle.js 文件。</p>\n<p>以上，是在webpack中集成TypeScript的一种基本模式，后续根据项目需要修改相关配置。</p>","frontmatter":{"title":"TypeScript学习笔记-在Webpack中配置TypeScript","date":"July 15, 2018","description":null,"categories":[],"tags":["TypeScript"]}},"previous":{"fields":{"slug":"/blogs/2018-10-08-在CentOS上部署Pyspider爬虫项目/"},"frontmatter":{"title":"在 CentOS 上部署 pyspider 爬虫项目"}},"next":{"fields":{"slug":"/blogs/2018-07-08-TypeScript学习笔记-入门:安装与基础知识/"},"frontmatter":{"title":"TypeScript学习笔记-入门:安装与基础知识","draft":null,"tags":["TypeScript"],"categories":[],"status":"publish"}}},"pageContext":{"id":"158ce494-b9c9-54ee-b68c-3e333c497589","previousPostId":"299b7724-70ec-5fd6-8938-26d6bf535bf8","nextPostId":"c3a661e5-2ead-53b9-8b15-75ff79894a62"}},
    "staticQueryHashes": ["2841359383"]}