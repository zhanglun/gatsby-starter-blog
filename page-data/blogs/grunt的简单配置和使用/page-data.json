{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/blogs/grunt的简单配置和使用/",
    "result": {"data":{"site":{"siteMetadata":{"title":"张小伦的网络日志","description":"欢迎来到张小伦的网络日志 \n\t\t一个记录生活，分享心得的博客","menu":[{"id":"home","name":"首页","url":"/"},{"id":"category","name":"分类","url":"/categories"},{"id":"archive","name":"归档","url":"/archives"},{"id":"about","name":"关于我","url":"/about"}]}},"markdownRemark":{"id":"5375af86-8d73-5da6-adf8-9a5b5e2ae7f9","html":"<p>Grunt 和 Grunt 的插件都是通过 Node.js 的包管理器 npm 来安装和管理的。为了方便使用 Grunt ，你应该在全局范围内安装 Grunt 的命令行接口(CLI)。要做到这一点，你可能需要使用 sudo (OS X，*nix，BSD 等平台中)权限或者作为超级管理员( Windows 平台)来运行 shell 命令。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install -g grunt-cli</code></pre></div>\n<p>使用全局安装之后，可以在任何一个目录中运行 grunt 命令。</p>\n<p>###如何工作</p>\n<p>每次运行 grunt 时，它都会使用 node 的 require() 系统查找本地已安装好的 grunt。在本地装好 Grunt 之后，运行 gurnt 命令时，CLI 就会加载这个本地安装好的 Grunt 库，然后应用你项目中的 Gruntfile 中的配置(这个文件用于配置项目中使用的任务)，并执行你所指定的所有任务。而 Grunt 库的安装则依赖 package.json 文件。</p>\n<p>假设已经安装好 Grunt CLI 并且项目也已经使用一个 package.json 和一个 Gruntfile 文件配置好了，那么接下来用 Grunt 进行工作就非常容易了：</p>\n<ol>\n<li>进入到项目的根目录(在命令行面板定位到项目根目录。在 windows 系统下，也可以进入项目根目录的文件夹后，按Shift+鼠标右键，打开右键菜单，选择“在此处打开命令窗口(W)”)。</li>\n<li>运行 npm install 安装项目相关依赖(插件，Grunt 内置任务等依赖)。</li>\n<li>使用 grunt (命令)运行 Grunt。</li>\n</ol>\n<p>###构建一个新的 Grunt 项目</p>\n<p>最简单的配置需要两个文件：<code class=\"language-text\">package.json</code> 和 <code class=\"language-text\">Gruntfile</code></p>\n<p><strong>package.json</strong>：这个文件被用来存储已经作为 npm 模块发布的项目元数据(也就是依赖模块)。你将在这个文件中列出你的项目所依赖的Grunt(通常我们在这里配置Grunt版本)和Grunt插件(相应版本的插件)。使用命令 <code class=\"language-text\">npm install</code> 安装依赖模块。</p>\n<p><strong>Gruntfile</strong>：通常这个文件被命名为Gruntfile.js或者Gruntfile.coffee，它用于配置或者定义Grunt任务和加载Grunt插件。</p>\n<p>####package.json</p>\n<p><code class=\"language-text\">package.json</code> 与 <code class=\"language-text\">Gruntfile</code> 相邻，都归属在项目的根目录中。在目录中运行 <code class=\"language-text\">npm install</code> 安装需要的依赖模块。其创建方式有几种：</p>\n<ol>\n<li><code class=\"language-text\">grunt-init</code> 命令创建 Grunt 模板时，会自动为项目创建一个 <code class=\"language-text\">package.json</code> 文件。</li>\n<li><code class=\"language-text\">npm init</code> 会自动创建一个基本的 <code class=\"language-text\">package.json</code> 文件。</li>\n<li>新建一个文件，重命名为 <code class=\"language-text\">package.json</code>。</li>\n</ol>\n<p>一个 <code class=\"language-text\">package.json</code> 文件示例：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\r\n    \"name\": \"my-project-name\", // 项目名称\r\n    \"version\": \"0.1.0\", // 项目版本\r\n    \"devDependencies\": { // 项目依赖\r\n        \"grunt\": \"~0.4.1\", // Grunt库\r\n        \"grunt-contrib-jshint\": \"~0.6.0\", //grunt中的工具\r\n        \"grunt-contrib-nodeunit\": \"~0.2.0\", //grunt中的工具\r\n        \"grunt-contrib-uglify\": \"~0.2.2\" //grunt中的工具，可以按照这种方式在 dependencies 中添加自己想要的工具\r\n    }\r\n}</code></pre></div>\n<p>####Gruntfile</p>\n<p><code class=\"language-text\">Gruntfile.js</code> 和 <code class=\"language-text\">Gruntfile.coffee</code> 文件都是归属于项目根目录中的一个有效的 JavaScript 或者 CoffeeScript 文件。\r\n一个 Gruntfile 由下面几部分组成：</p>\n<ul>\n<li>“wrapper” 函数，一个包装函数</li>\n<li>项目和任务配置</li>\n<li>加载的 Grunt 插件和任务</li>\n<li>自定义任务</li>\n</ul>\n<h5>wrapper 函数</h5>\n<p>每个 Gruntfile 都使用这个基本格式，同时所有的 Grunt 戴玛都必须指点在这个函数里面：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">module.exports=function(){\r\n    //在这里添加 Grunt 相关\r\n}</code></pre></div>\n<p>#####项目和任务配置\r\n通常 Grunt 任务所依赖的配置素据都被定义在一个对象中，而这个对象将会被传递给 <code class=\"language-text\">grunt.initConfig</code> 方法。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 项目配置\r\ngrunt.initConfig({\r\n    pkg: grunt.file.readJSON('package.json'),\r\n    uglify: {\r\n        options: {\r\n            banner: '/*! &lt;%= pkg.name %> &lt;%= grunt.template.today(\"yyyy-mm-dd\") %> */\\n'\r\n        },\r\n        build: {\r\n            src: 'src/&lt;%=pkg.name %>.js',\r\n            dest: 'build/&lt;%= pkg.name %>.min.js'\r\n        }\r\n    }\r\n});</code></pre></div>\n<p>在上面的代码中，<code class=\"language-text\">grunt.file.readJSON('package.json')</code> 会把存储在 <code class=\"language-text\">package.json</code> 中的 JSON 元数据导入到 Grunt 配置中。由于 <code class=\"language-text\">&lt;% %></code> 模板字符串可以引用任意的配置属性，因此可以通过这种方式来制定诸如<strong>文件路径</strong>和<strong>文件列表类型的配置数据</strong>。</p>\n<p>与大多数的任务一样， grunt-contrib-uglify 插件的 <code class=\"language-text\">uglify</code> 任务要求他的配置被指定在一个同名属性中。在这个例子中，我们指定了一个 <code class=\"language-text\">banner</code> 选项，用于在文件顶部生成一个注释。紧接着是一个名为 <code class=\"language-text\">build</code> 的 uglify 目标，用于将一个js文件压缩为一个目标文件，比如：将 src 目录中的 <code class=\"language-text\">jQuery-1.9.0.js</code> 压缩成 <code class=\"language-text\">jQuery-1.9.0.min.js</code>，然后存储到 dest 目录中。\r\n插件一般都托管在 github 上，其使用方法都会有说明。比如 <a href=\"https://github.com/gruntjs/grunt-contrib-uglify\">grunt-contrib-uglify</a></p>\n<p>#####加载 grunt 插件和任务</p>\n<p>只要一个插件被作为一个依赖指定在项目的 <code class=\"language-text\">package.json</code> 文件中，并且通过 <code class=\"language-text\">npm install</code> 安装好，都可以在 <code class=\"language-text\">Gruntfile</code> 文件中使用下面的简单命令启用.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//加载提供 \"uglify\" 任务的插件\r\ngrunt.loadNpmTasks(\"grunt-contrib-uglify\");</code></pre></div>\n<p><strong>tips:</strong> 使用 <code class=\"language-text\">grunt --help</code> 命令可以列出所有可用的任务</p>\n<p>同时，你可以通过定义一个 <code class=\"language-text\">default</code> 任务来配置 Grunt，让他默认运行一个过着多个任务。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 默认任务\r\ngrunt.registerTask('default', ['uglify']);</code></pre></div>\n<p>可以将你允许默认运行的任务名称以数组的形式作为参数传递。</p>\n<p>如果你想要的任务没有对应的 Grunt 插件提供相应的功能，你可以在 Gruntfile 内定义自定义的任务：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">module.exports=function(){\r\n    //一个很基础的default任务\r\n    grunt.registerTask(\"default\",\"load some stuff.\",function(){\r\n        grunt.log.write(\"Loggin some stuff……\").ok();\r\n    });\r\n};</code></pre></div>\n<p>自定义的项目特定的任务可以不定义在 Gruntfile 中；它们可以定义在一个外部 .js 文件中，然后通过 grunt.loadTasks 方法来加载。</p>\n<p>参考自：<a href=\"http://www.gruntjs.org/docs/getting-started.html\">Grunt新手教程</a></p>","frontmatter":{"title":"Grunt的简单配置和使用","date":"August 08, 2014","description":null,"categories":[],"tags":["Grunt","工具"]}},"previous":{"fields":{"slug":"/blogs/踩坑日记-ie中的haslayout属性/"},"frontmatter":{"title":"踩坑日记-IE中的 hasLayout 属性"}},"next":{"fields":{"slug":"/blogs/git使用笔记(二)-撤销操作/"},"frontmatter":{"title":"git 使用笔记(二)-撤销操作","draft":null,"tags":["Git","笔记"],"categories":[],"status":"publish"}}},"pageContext":{"id":"5375af86-8d73-5da6-adf8-9a5b5e2ae7f9","previousPostId":"dc96c82a-681e-5ed5-865e-9d8af26c640a","nextPostId":"70304930-0fb9-5b3c-a611-402bfcfc6020"}},
    "staticQueryHashes": ["2841359383"]}